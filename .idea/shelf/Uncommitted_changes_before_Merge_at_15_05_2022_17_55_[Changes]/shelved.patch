Index: src/main/TestAppli.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\n\r\nimport environnementburger.GridManagement;\r\nimport mqtt.Message;\r\nimport mqtt.Mqtt;\r\nimport mqtt.NoMqtt;\r\nimport java.awt.Color;\r\nimport org.json.simple.JSONObject;\r\nimport components.TurtlebotFactory;\r\nimport java.io.File;\r\nimport java.time.LocalDateTime;  \r\nimport java.time.format.DateTimeFormatter;  \r\n\r\npublic class TestAppli {\r\n\t\r\n\tprotected static int WAITTIME;\r\n\tprotected static int MQTT;\r\n\tprotected static int DISPLAY;\r\n\tprotected static int DEBUG;\r\n\tprotected static int SIMULATION;\r\n\tprotected static int DISPLAYWIDTH;\r\n\tprotected static int DISPLAYHEIGHT;\r\n\tprotected static String DISPLAYTITLE;\r\n\tprotected static int NBROBOT;\r\n\tprotected static int NBOBSTACLE;\r\n\tprotected static int ROWS;\r\n\tprotected static int SEED;\r\n\tprotected static int FIELD;\r\n\tprotected static int COLUMNS;\r\n\tprotected static Color COLORROBOT;\r\n\tprotected static Color COLORGOAL;\r\n\tprotected static Color COLOROBSTACLE;\r\n\tprotected static Color COLOROTHER;\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString sttime = \"log-\"+java.time.LocalDateTime.now();\r\n\t\tFile f = new File(sttime);\r\n\t\tf.mkdir();\r\n\t\tIniFile ifile= new IniFile(\"prop.ini\");\r\n\t\tTestAppli.MQTT = ifile.getIntValue(\"configuration\",\"mqtt\");\r\n\t\tTestAppli.WAITTIME = ifile.getIntValue(\"configuration\",\"waittime\");\r\n\t\tTestAppli.DISPLAY = ifile.getIntValue(\"configuration\",\"display\");\r\n\t\tTestAppli.DEBUG = ifile.getIntValue(\"configuration\",\"debug\");\r\n\t\tTestAppli.SIMULATION = ifile.getIntValue(\"configuration\",\"simulation\");\r\n\t\tTestAppli.NBROBOT =  ifile.getIntValue(\"configuration\", \"robot\");\r\n\t\tTestAppli.NBOBSTACLE =  ifile.getIntValue(\"configuration\", \"obstacle\");\r\n\t\tTestAppli.SEED =  ifile.getIntValue(\"configuration\", \"seed\");\r\n\t\tTestAppli.FIELD =  ifile.getIntValue(\"configuration\", \"field\");\r\n\t\tTestAppli.ROWS =  ifile.getIntValue(\"environment\", \"rows\");\r\n\t\tTestAppli.COLUMNS =  ifile.getIntValue(\"environment\", \"columns\");\r\n\t\tif(TestAppli.DISPLAY == 1) { \r\n\t\t\tTestAppli.DISPLAYWIDTH =  ifile.getIntValue(\"display\",\"width\");\r\n\t\t\tTestAppli.DISPLAYHEIGHT = ifile.getIntValue(\"display\",\"height\");\r\n\t\t\tTestAppli.DISPLAYTITLE = ifile.getStringValue(\"display\",\"title\");\r\n\t\t\tTestAppli.COLORROBOT = ifile.getColorValue(\"color\",\"robot\");\r\n\t\t\tTestAppli.COLORGOAL = ifile.getColorValue(\"color\",\"goal\");\r\n\t\t\tTestAppli.COLOROBSTACLE = ifile.getColorValue(\"color\",\"obstacle\");\r\n\t\t\tTestAppli.COLOROTHER = ifile.getColorValue(\"color\",\"other\");\r\n\t\t}\r\n\t\t\r\n\t\tMessage mqttClient;\r\n\t\tif(TestAppli.MQTT == 1) {\r\n\t\t\tmqttClient = new Mqtt(\"android\", TestAppli.DEBUG);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmqttClient = new NoMqtt(\"android\", TestAppli.DEBUG);\r\n\t\t}\r\n\r\n\t\tGridManagement env = new GridManagement();\r\n\t\tenv.setMessage(mqttClient);\t\t\r\n\t\tmqttClient.setAppli(env);\t\t\r\n\t\tenv.initSubscribe();\t\r\n\t\t\r\n\t\tTurtlebotFactory tf = new TurtlebotFactory(sttime);\r\n\t\ttf.setMessage(mqttClient);\t\t\r\n\t\tmqttClient.setAppli(tf);\r\n\t\ttf.initSubscribe();\r\n\r\n\t\tJSONObject mymes = new JSONObject();\r\n\t\tmymes.put(\"display\", TestAppli.DISPLAY+\"\");\r\n\t\tmqttClient.publish(\"configuration/display\",mymes.toJSONString());\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"debug\", TestAppli.DEBUG+\"\");\r\n\t\tmqttClient.publish(\"configuration/debug\",mymes.toJSONString());\t\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"waittime\", TestAppli.WAITTIME+\"\");\r\n\t\tmqttClient.publish(\"configuration/waittime\",mymes.toJSONString());\t\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"simulation\", TestAppli.SIMULATION+\"\");\r\n\t\tmqttClient.publish(\"configuration/simulation\",mymes.toJSONString());\t\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"seed\", TestAppli.SEED+\"\");\r\n\t\tmqttClient.publish(\"configuration/seed\",mymes.toJSONString());\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"field\", TestAppli.FIELD+\"\");\r\n\t\tmqttClient.publish(\"configuration/field\",mymes.toJSONString());\r\n\t\tif(TestAppli.DISPLAY == 1) { \r\n\t\t\tmymes = new JSONObject();\r\n\t\t\tmymes.put(\"displaywidth\", TestAppli.DISPLAYWIDTH+\"\");\r\n\t\t\tmqttClient.publish(\"display/width\",mymes.toJSONString());\r\n\t\t\tmymes = new JSONObject();\r\n\t\t\tmymes.put(\"displayheight\", TestAppli.DISPLAYHEIGHT+\"\");\t\r\n\t\t\tmqttClient.publish(\"display/height\",mymes.toJSONString());\r\n\t\t\tmymes = new JSONObject();\r\n\t\t\tmymes.put(\"displaytitle\", TestAppli.DISPLAYTITLE);\r\n\t\t\tmqttClient.publish(\"display/title\",mymes.toJSONString());\r\n\t\t\tmymes = new JSONObject();\r\n\t\t\tmymes.put(\"color\", Integer.toString(TestAppli.COLORROBOT.getRGB()));\r\n\t\t\tmqttClient.publish(\"display/robot\",mymes.toJSONString());\r\n\t\t\tmymes = new JSONObject();\r\n\t\t\tmymes.put(\"color\", Integer.toString(TestAppli.COLORGOAL.getRGB()));\r\n\t\t\tmqttClient.publish(\"display/goal\",mymes.toJSONString());\r\n\t\t\tmymes = new JSONObject();\r\n\t\t\tmymes.put(\"color\", Integer.toString(TestAppli.COLOROBSTACLE.getRGB()));\r\n\t\t\tmqttClient.publish(\"display/obstacle\",mymes.toJSONString());\r\n\t\t\tmymes = new JSONObject();\r\n\t\t\tmymes.put(\"color\", Integer.toString(TestAppli.COLOROTHER.getRGB()));\r\n\t\t\tmqttClient.publish(\"display/other\",mymes.toJSONString());\r\n\t\t}\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"rows\", TestAppli.ROWS+\"\");\r\n\t\tmqttClient.publish(\"environment/rows\",mymes.toJSONString());\t\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"columns\", TestAppli.COLUMNS+\"\");\r\n\t\tmqttClient.publish(\"environment/columns\",mymes.toJSONString());\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"nbObstacle\", TestAppli.NBOBSTACLE+\"\");\r\n\t\tmqttClient.publish(\"configuration/nbObstacle\", mymes.toJSONString());\t\t\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"columns\", TestAppli.COLUMNS+\"\");\r\n\t\tmymes.put(\"rows\", TestAppli.ROWS+\"\");\r\n\t\tmqttClient.publish(\"environment/grid\",mymes.toJSONString());\t\r\n\t\tmymes = new JSONObject();\r\n\t\tmymes.put(\"nbRobot\", TestAppli.NBROBOT+\"\");\r\n\t\tmqttClient.publish(\"configuration/nbRobot\", mymes.toJSONString());\r\n\t\ttf.initTurtle();\r\n\t\tenv.publishInitRobot();\r\n\t\tenv.publishGridSize();\r\n\t\ttf.initTurtleGrid();\r\n\t\ttf.schedule(100);\t\r\n\t\t/*tf.publishRobotInit();\r\n\t\ttry {\r\n\t\t    Thread.sleep(TestAppli.WAITTIME);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t    e.printStackTrace();\r\n\t\t}\r\n\t\ttf.testMove(\"burger_5\");\r\n\t\ttry {\r\n\t\t    Thread.sleep(TestAppli.WAITTIME);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t    e.printStackTrace();\r\n\t\t}\r\n\t\tenv.moveRobot(5,3,7,1,7);\r\n\t\tif(TestAppli.DISPLAY == 1)\r\n\t\t\tenv.refresh();\r\n\t\tif(TestAppli.DEBUG == 1) { \r\n\t\t\tenv.displayGrid();\r\n\t\t}\r\n\t\tSystem.out.println(tf);*/\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/TestAppli.java b/src/main/TestAppli.java
--- a/src/main/TestAppli.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/main/TestAppli.java	(date 1652451708028)
@@ -28,6 +28,10 @@
 	protected static int FIELD;
 	protected static int COLUMNS;
 	protected static Color COLORROBOT;
+	protected static Color COLORVIPERE;
+	protected static Color COLORPOULE;
+	protected static Color COLORRENARD;
+
 	protected static Color COLORGOAL;
 	protected static Color COLOROBSTACLE;
 	protected static Color COLOROTHER;
@@ -52,7 +56,13 @@
 			TestAppli.DISPLAYWIDTH =  ifile.getIntValue("display","width");
 			TestAppli.DISPLAYHEIGHT = ifile.getIntValue("display","height");
 			TestAppli.DISPLAYTITLE = ifile.getStringValue("display","title");
+			//ADD NEW TEAMS
 			TestAppli.COLORROBOT = ifile.getColorValue("color","robot");
+			TestAppli.COLORVIPERE = ifile.getColorValue("color","vipere");
+			TestAppli.COLORPOULE = ifile.getColorValue("color","poule");
+			TestAppli.COLORRENARD = ifile.getColorValue("color","renard");
+
+
 			TestAppli.COLORGOAL = ifile.getColorValue("color","goal");
 			TestAppli.COLOROBSTACLE = ifile.getColorValue("color","obstacle");
 			TestAppli.COLOROTHER = ifile.getColorValue("color","other");
@@ -105,8 +115,21 @@
 			mymes.put("displaytitle", TestAppli.DISPLAYTITLE);
 			mqttClient.publish("display/title",mymes.toJSONString());
 			mymes = new JSONObject();
+			//ADD THE OTHERS ONES. modify le contenu du message
 			mymes.put("color", Integer.toString(TestAppli.COLORROBOT.getRGB()));
 			mqttClient.publish("display/robot",mymes.toJSONString());
+			//VIPERE
+			mymes = new JSONObject();
+			mymes.put("color", Integer.toString(TestAppli.COLORVIPERE.getRGB()));
+			mqttClient.publish("display/vipere",mymes.toJSONString());
+			//POULE
+			mymes = new JSONObject();
+			mymes.put("color", Integer.toString(TestAppli.COLORPOULE.getRGB()));
+			mqttClient.publish("display/poule",mymes.toJSONString());
+			//RENARD
+			mymes = new JSONObject();
+			mymes.put("color", Integer.toString(TestAppli.COLORRENARD.getRGB()));
+			mqttClient.publish("display/renard",mymes.toJSONString());
 			mymes = new JSONObject();
 			mymes.put("color", Integer.toString(TestAppli.COLORGOAL.getRGB()));
 			mqttClient.publish("display/goal",mymes.toJSONString());
Index: src/main/IniFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\n\r\nimport org.ini4j.Ini;\r\nimport org.ini4j.IniPreferences;\r\nimport java.awt.Color;\r\nimport java.io.File;\r\n\r\nimport java.util.prefs.Preferences;\r\n\r\npublic class IniFile {\r\n  private String filename;\r\n  private Ini ini;\r\n  Preferences prefs;\r\n\r\n  public IniFile(String name) throws Exception {\r\n        filename = name;\r\n        ini = new Ini(new File(filename));\r\n        prefs = new IniPreferences(ini);\r\n  }\r\n\r\n  public int getIntValue(String section, String prop) {\r\n        //return ini.get(section, prop, int.class);\r\n        return prefs.node(section).getInt(prop, 0);\r\n  }\r\n\r\n  public double getDoubleValue(String section, String prop) {\r\n        //return ini.get(section, prop, double.class);     \r\n        return prefs.node(section).getDouble(prop, 0);\r\n  }\r\n\r\n  public String getStringValue(String section, String prop) {\r\n    //return ini.get(section, prop);\r\n    return prefs.node(section).get(prop, null);\r\n  }\r\n\r\n  public Color getColorValue(String section, String prop) {\r\n    //return ini.get(section, prop);\r\n    String c =  prefs.node(section).get(prop, null);\r\n    Color mycolor;\r\n    switch(c) {\r\n      case \"blue\":\r\n        mycolor = Color.BLUE;\r\n        break;\r\n      case \"green\":          \r\n        mycolor = Color.GREEN;\r\n        break;\r\n      case \"red\":\r\n        mycolor = Color.RED;\r\n        break;        \r\n      case \"yellow\":\r\n        mycolor = Color.YELLOW;\r\n        break;\r\n      case \"gray\":\r\n        mycolor = Color.GRAY;\r\n        break;\r\n      default:\r\n          mycolor = Color.WHITE;\r\n    }\r\n    return mycolor;\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/IniFile.java b/src/main/IniFile.java
--- a/src/main/IniFile.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/main/IniFile.java	(date 1652451120631)
@@ -41,6 +41,12 @@
       case "blue":
         mycolor = Color.BLUE;
         break;
+      case "white":
+        mycolor = Color.WHITE;
+        break;
+      case "orange":
+        mycolor = Color.ORANGE;
+        break;
       case "green":          
         mycolor = Color.GREEN;
         break;
Index: src/model/RobotDescriptor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport org.json.simple.JSONObject;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\n\r\npublic class RobotDescriptor extends EntityDescriptor implements Situated{\r\n\t\r\n\tprotected Map<String,String> properties;\t\r\n\t\r\n\tpublic RobotDescriptor (int [] location, int id, String name) {\r\n\t\tsuper(location);\r\n\t\tproperties = new HashMap<String, String>();\r\n\t\tproperties.put(\"id\",id+\"\");\r\n\t\tproperties.put(\"name\",name);\r\n\t}\r\n\r\n\tpublic ComponentType getComponentType(){\r\n\t\treturn ComponentType.robot;\r\n\t}\r\n\r\n\tpublic String display(){\r\n\t\treturn getId()+\"\";\r\n\t}\r\n\r\n\tpublic int getId() {\r\n\t\treturn Integer.parseInt(properties.get(\"id\"));\r\n\t}\r\n\r\n\tpublic void setId(int id) {\r\n\t\tproperties.put(\"id\",id+\"\");\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn properties.get(\"name\");\t\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tproperties.put(\"name\", name);\r\n\t}\r\n\r\n\tpublic String toString() {\r\n\t\treturn \"{type: \" + getComponentType() + \", name: \" + getName()+ \", id: \" + getId() + \", x: \" + x  + \", y: \" + y + \"}\"; \r\n\t}\r\n\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tpublic JSONObject toJSON() {\r\n\t\tJSONObject jo = new JSONObject();\r\n\t\tjo.put(\"type\",\"robot\");\r\n\t\tjo.put(\"name\",getName());\r\n\t\tjo.put(\"id\",getId()+\"\");\r\n\t\tjo.put(\"x\",\"\"+x);\r\n\t\tjo.put(\"y\",\"\"+y);\r\n\t\treturn jo;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/RobotDescriptor.java b/src/model/RobotDescriptor.java
--- a/src/model/RobotDescriptor.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/model/RobotDescriptor.java	(date 1652451120612)
@@ -1,18 +1,24 @@
 package model;
 
 import org.json.simple.JSONObject;
+
+import java.awt.*;
 import java.util.Map;
 import java.util.HashMap;
 
 public class RobotDescriptor extends EntityDescriptor implements Situated{
 	
-	protected Map<String,String> properties;	
+	protected Map<String,String> properties;
+	protected String color;
 	
 	public RobotDescriptor (int [] location, int id, String name) {
 		super(location);
 		properties = new HashMap<String, String>();
 		properties.put("id",id+"");
 		properties.put("name",name);
+		properties.put("color", color);
+		//add color attribute
+
 	}
 
 	public ComponentType getComponentType(){
Index: prop.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[configuration]\r\n  display = 1\r\n  simulation = 1\r\n  mqtt = 0\r\n  robot = 50\r\n  obstacle = 1000\r\n  seed = 10\r\n  field = 2\r\n  debug = 2\r\n  waittime = 100\r\n  step=100\r\n\r\n[environment]\r\n  rows = 50\r\n  columns = 100\r\n\r\n[display]\r\n  width = 800\r\n  height = 600\r\n  title = Display grid\r\n\r\n[color]\r\n  robot = blue\r\n  goal = green\r\n  other = gray\r\n  obstacle = red\r\n  unknown = darkGray\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prop.ini b/prop.ini
--- a/prop.ini	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/prop.ini	(date 1652451773589)
@@ -2,17 +2,17 @@
   display = 1
   simulation = 1
   mqtt = 0
-  robot = 50
-  obstacle = 1000
-  seed = 10
-  field = 2
-  debug = 2
-  waittime = 100
+  robot = 9
+  obstacle = 0
+  seed = 8
+  field = 1
+  debug = 0
+  waittime = 1000
   step=100
 
 [environment]
-  rows = 50
-  columns = 100
+  rows = 15
+  columns = 15
 
 [display]
   width = 800
@@ -20,6 +20,9 @@
   title = Display grid
 
 [color]
+  vipere = blue
+  poule = white
+  renard = orange
   robot = blue
   goal = green
   other = gray
Index: src/components/TurtlebotFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components;\r\n\r\nimport mqtt.Message;\r\n\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\n\r\nimport burger.SmartTurtlebot;\r\nimport burger.RandomTurtlebot;\r\nimport burger.RealTurtlebot;\r\nimport burger.Orientation;\r\nimport mqtt.Message;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/* This class defines the different operations that the robot can do on the grid */\r\n\r\npublic class TurtlebotFactory implements SimulationComponent {\t\r\n\t\r\n\tprivate HashMap<String, Turtlebot> mesRobots;\r\n\tprivate final String turtlebotName = \"burger_\";\t\r\n\tprotected Message clientMqtt;\r\n\tprotected int simulation;\r\n\tprotected int debug;\r\n\tprotected int display;\r\n\tprotected int waittime;\r\n\tprotected int seed;\r\n\tprotected int field;\r\n\tprotected String sttime;\r\n\t\r\n\tpublic TurtlebotFactory(String sttime) {\r\n\t\tthis.simulation = 0;\r\n\t\tthis.debug = 0;\r\n\t\tthis.display = 0;\r\n\t\tthis.waittime = 0;\r\n\t\tthis.sttime = sttime;\r\n\t\tmesRobots = new HashMap<String, Turtlebot>();\r\n\t}\r\n\r\n\tpublic void setMessage(Message mqtt) {\r\n\t\tclientMqtt = mqtt;\r\n\t}\r\n\r\n\tpublic void handleMessage(String topic, JSONObject content){\r\n\t\tif (topic.contains(\"configuration/nbRobot\")) {\r\n           \tinitRobots(content);\r\n        }\r\n        else if (topic.contains(\"configuration/debug\")) {\r\n           \tdebug = Integer.parseInt((String)content.get(\"debug\"));\r\n        }\r\n        else if (topic.contains(\"configuration/field\")) {\r\n           \tfield = Integer.parseInt((String)content.get(\"field\"));\r\n        }\r\n        else if (topic.contains(\"configuration/seed\")) {\r\n           \tseed = Integer.parseInt((String)content.get(\"seed\"));\r\n        }\r\n        else if (topic.contains(\"configuration/display\")) {\r\n           \tdisplay = Integer.parseInt((String)content.get(\"display\"));\r\n        }\r\n        else if (topic.contains(\"configuration/simulation\")) {\r\n           \tsimulation = Integer.parseInt((String)content.get(\"simulation\"));\r\n        }\r\n        else if (topic.contains(\"configuration/waittime\")) {\r\n    \t    waittime = Integer.parseInt((String)content.get(\"waittime\"));\r\n        }\r\n\t}\r\n\r\n\tpublic void moveRobot(Turtlebot t) {\r\n\t\tJSONObject jo = new JSONObject();\r\n       \tjo.put(\"name\", t.getName());\r\n       \tjo.put(\"action\", \"move\");\r\n       \tjo.put(\"step\", \"1\");\r\n      \tclientMqtt.publish(t.getName() +\"/action\", jo.toJSONString());\r\n\t}\r\n\r\n\tpublic void schedule(int nbStep) {\r\n\t\tfor(int i = 0; i < nbStep; i++){\r\n\t\t\tfor(Turtlebot t: mesRobots.values()) {\r\n\t\t\t\tupdateGrid(t);\r\n\t\t\t\tmoveRobot(t);\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tThread.sleep(waittime);\r\n\t\t\t}catch(InterruptedException ie){\r\n\t\t\t\tSystem.out.println(ie);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(Turtlebot t: mesRobots.values()) {\r\n\t\t\tt.setGoalReached(true);\r\n\t\t}\r\n\t\tSystem.out.println(\"END\");\r\n\t}\r\n\r\n\tpublic void updateGrid(Turtlebot t) {\r\n\t\tJSONObject jo = new JSONObject();\r\n       \tjo.put(\"name\", t.getName());\r\n      \tjo.put(\"field\",t.getField()+\"\");\r\n       \tjo.put(\"x\",t.getX()+\"\");\r\n       \tjo.put(\"y\",t.getY()+\"\");\r\n       \tclientMqtt.publish(\"robot/grid\", jo.toJSONString());\r\n\t}\r\n\r\n\tpublic void next(int id) {\r\n\t\tif(!finish()) {\r\n\t\t\tint next = id + 1;\r\n\t\t\twhile(true) {\r\n\t\t\t\tJSONObject message = new JSONObject();\r\n\t\t\t\tif (next == mesRobots.size() + 2)\r\n\t\t\t\t\tnext = 2;\r\n\t\t\t\tString stn = turtlebotName + next;\r\n\t\t\t\tTurtlebot t = mesRobots.get(stn);\r\n\t\t\t\tif(t.isGoalReached()) {\r\n\t\t\t\t\tnext++;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tJSONObject robot = new JSONObject();\r\n\t\t\t\trobot.put(\"id\", turtlebotName + next);\r\n\t\t\t\tmessage.put(\"robot\", robot);\r\n\t\t\t\tmessage.put(\"next\", next);\r\n\t\t\t\tclientMqtt.publish(stn + \"/nextStep\", message.toJSONString());\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tJSONObject msg = new JSONObject();\r\n\t\tmsg.put(\"end\", 1+\"\");\r\n\t\tclientMqtt.publish(\"/end\", msg.toJSONString());\r\n\t}\r\n\r\n\tpublic boolean finish() {\r\n\t\tint i = 0;\r\n\t\tfor (Turtlebot t : mesRobots.values())\r\n\t\t\tif (!t.isGoalReached())\r\n\t\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*public void testMove(String robotN){\r\n\t\tTurtlebot t = mesRobots.get(robotN);\r\n\t\tJSONObject pos = new JSONObject();\r\n\t\tpos.put(\"x1\", t.getX()+\"\");\r\n\t\tpos.put(\"y1\", t.getY()+\"\");\r\n\t\tt.setLocation(1,7);\r\n\t\tpos.put(\"x2\", t.getX()+\"\");\r\n\t\tpos.put(\"y2\", t.getY()+\"\");\r\n\t\tclientMqtt.publish(robotN+\"/position\", pos.toJSONString());\r\n\t}*/\r\n\r\n\tpublic void initSubscribe() {\t\t\r\n\t\tclientMqtt.subscribe(\"configuration/nbRobot\");\r\n\t\tclientMqtt.subscribe(\"configuration/debug\");\r\n\t\tclientMqtt.subscribe(\"configuration/display\");\r\n\t\tclientMqtt.subscribe(\"configuration/simulation\");\r\n\t\tclientMqtt.subscribe(\"configuration/waittime\");\r\n\t\tclientMqtt.subscribe(\"configuration/seed\");\r\n\t\tclientMqtt.subscribe(\"configuration/field\");\r\n\t}\r\n\r\n\tpublic Turtlebot factory(int id, String name, Message clientMqtt) {\r\n\t\tif (mesRobots.containsKey(name))\r\n\t    \treturn mesRobots.get(name);\t    \r\n\t    Turtlebot turtle;\r\n\t    if(simulation == 0) {\r\n\t    \tif(debug == 1) {\r\n\t    \t\tSystem.out.println(\"Create real robot\");\r\n\t    \t}\r\n\t    \tturtle = new RealTurtlebot(id, name, seed, field, clientMqtt, debug);\r\n\t    \tif(debug==2 && sttime != null) {\r\n\t    \t\tturtle.setLog(sttime);\r\n\t    \t}\r\n\t    } else {\r\n\t    \tif(debug == 1) {\r\n\t    \t\tSystem.out.println(\"Create simulated robot\");\r\n\t    \t}\r\n\t    \tturtle = new SmartTurtlebot(id, name, seed, field, clientMqtt, debug);\r\n\t    \t//turtle = new RandomTurtlebot(id, name, seed, field, clientMqtt, debug);\r\n\t    \tif(debug==2 && sttime != null) {\r\n\t    \t\tturtle.setLog(sttime);\r\n\t    \t}\t    \t\r\n\t    }\r\n\t    mesRobots.put(name, turtle);\r\n\t    return turtle;\r\n\t}\r\n\r\n\tpublic String toString() {\r\n\t\tString st = \"{\";\r\n\t\tfor(Map.Entry<String, Turtlebot> entry : mesRobots.entrySet()) {\r\n    \t\tString key = entry.getKey();\r\n    \t\tTurtlebot value = entry.getValue();\r\n    \t\tst += \"{\" + key + \" : \" + value + \"}\";\r\n    \t\tst += \"\\n\";\r\n\t\t}\r\n\t\tst += \"}\";\r\n\t\treturn st;\r\n\t}\r\n\r\n\tpublic void initTurtle(){\r\n\t\tfor(Turtlebot t: mesRobots.values()) {\r\n    \t\tt.init();\r\n    \t\tclientMqtt.setAppli(t);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void initTurtleGrid(){\r\n\t\tfor(Turtlebot t: mesRobots.values()) {\r\n    \t\tJSONObject jo = new JSONObject();\r\n        \tjo.put(\"name\", t.getName());\r\n        \tjo.put(\"field\",t.getField()+\"\");\r\n        \tjo.put(\"x\",t.getX()+\"\");\r\n        \tjo.put(\"y\",t.getY()+\"\");\r\n        \tclientMqtt.publish(\"configuration/robot/grid\", jo.toJSONString());\r\n        }\r\n    }\r\n\r\n\tpublic Turtlebot get(String idRobot) {\r\n\t\treturn mesRobots.get(idRobot);\r\n\t}\r\n\r\n\tpublic void initRobots(JSONObject nbRobot) {\r\n\t\tint nbr = Integer.parseInt((String) nbRobot.get(\"nbRobot\"));\r\n\t\tif( debug == 1) {\r\n\t\t\tSystem.out.println(nbr);\r\n\t\t}\r\n\t\tfor (int i = 2; i < 2 + nbr; i++) {\r\n\t\t\tfactory(i, turtlebotName + i, clientMqtt);\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/TurtlebotFactory.java b/src/components/TurtlebotFactory.java
--- a/src/components/TurtlebotFactory.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/components/TurtlebotFactory.java	(date 1652447043788)
@@ -1,14 +1,12 @@
 package components;
 
+import burger.*;
+import model.ComponentType;
 import mqtt.Message;
 
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
 
-import burger.SmartTurtlebot;
-import burger.RandomTurtlebot;
-import burger.RealTurtlebot;
-import burger.Orientation;
 import mqtt.Message;
 
 import java.util.HashMap;
@@ -28,9 +26,10 @@
 	protected int seed;
 	protected int field;
 	protected String sttime;
+	protected Team team= Team.viperes;
 	
 	public TurtlebotFactory(String sttime) {
-		this.simulation = 0;
+		this.simulation = 1;
 		this.debug = 0;
 		this.display = 0;
 		this.waittime = 0;
@@ -155,8 +154,8 @@
 		clientMqtt.subscribe("configuration/seed");
 		clientMqtt.subscribe("configuration/field");
 	}
-
-	public Turtlebot factory(int id, String name, Message clientMqtt) {
+//créer un robot
+	public Turtlebot factory(int id, String name, Message clientMqtt, ComponentType team) {
 		if (mesRobots.containsKey(name))
 	    	return mesRobots.get(name);	    
 	    Turtlebot turtle;
@@ -164,7 +163,7 @@
 	    	if(debug == 1) {
 	    		System.out.println("Create real robot");
 	    	}
-	    	turtle = new RealTurtlebot(id, name, seed, field, clientMqtt, debug);
+	    	turtle = new RealTurtlebot(id, name, seed, field, clientMqtt, debug,team);
 	    	if(debug==2 && sttime != null) {
 	    		turtle.setLog(sttime);
 	    	}
@@ -172,7 +171,7 @@
 	    	if(debug == 1) {
 	    		System.out.println("Create simulated robot");
 	    	}
-	    	turtle = new SmartTurtlebot(id, name, seed, field, clientMqtt, debug);
+	    	turtle = new HunterTurtleBot2(id, name, seed, field, clientMqtt, debug,team);
 	    	//turtle = new RandomTurtlebot(id, name, seed, field, clientMqtt, debug);
 	    	if(debug==2 && sttime != null) {
 	    		turtle.setLog(sttime);
@@ -221,8 +220,17 @@
 		if( debug == 1) {
 			System.out.println(nbr);
 		}
-		for (int i = 2; i < 2 + nbr; i++) {
-			factory(i, turtlebotName + i, clientMqtt);
-		}
+
+		factory(2, turtlebotName + 2, clientMqtt,ComponentType.vipere);
+		factory(3, turtlebotName + 3, clientMqtt,ComponentType.renard);
+		factory(4, turtlebotName + 4, clientMqtt,ComponentType.poule);
+		factory(5, turtlebotName + 5, clientMqtt,ComponentType.vipere);
+		factory(6, turtlebotName + 6, clientMqtt,ComponentType.renard);
+		factory(7, turtlebotName + 7, clientMqtt,ComponentType.poule);
+		factory(8, turtlebotName + 8, clientMqtt,ComponentType.vipere);
+		factory(9, turtlebotName + 9, clientMqtt,ComponentType.renard);
+		factory(10, turtlebotName + 10, clientMqtt,ComponentType.poule);
+
+
 	}
 }
\ No newline at end of file
Index: src/environnementburger/GridManagement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package environnementburger;\r\n\r\nimport components.SimulationComponent;\r\nimport model.ComponentType;\r\nimport components.Obstacle;\r\nimport model.EmptyCell;\r\nimport model.UnknownCell;\r\nimport model.RobotDescriptor;\r\nimport main.TestAppli;\r\nimport model.Grid;\r\nimport model.Goal;\r\nimport model.Situated;\r\nimport mqtt.Message;\r\n\r\nimport java.awt.Color;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\n\r\n\r\npublic class GridManagement implements SimulationComponent {\r\n\tprotected Grid grid;\r\n\tprivate ArrayList<Goal> goals;\r\n\tprivate static final String turtlebotName = \"burger_\";\r\n\tprotected int nbObstacles;\r\n\tprotected int nbRobots;\r\n\tprotected Message clientMqtt;\r\n\tprotected String name;\r\n\tprotected int debug;\r\n\tprotected int rows;\r\n\tprotected int columns;\r\n\tprotected int display;\r\n\tprotected int displaywidth;\r\n\tprotected int displayheight;\r\n\tprotected String displaytitle;\r\n\tprotected Color colorrobot;\r\n\tprotected Color colorobstacle;\r\n\tprotected Color colorgoal;\r\n\tprotected Color colorother;\r\n\tprotected Color colorunknown;\r\n\r\n\tColorGrid cg;\r\n\t\r\n\tprotected int seed;\r\n\r\n\tpublic void initSubscribe() {\r\n\t\tclientMqtt.subscribe(\"robot/nextPosition\");\t\r\n\t\tclientMqtt.subscribe(\"configuration/nbRobot\");\t\r\n\t\tclientMqtt.subscribe(\"configuration/nbObstacle\");\t\r\n\t\t//clientMqtt.subscribe(\"configuration/nbRobot\");\r\n\t\tclientMqtt.subscribe(\"configuration/seed\");\t\r\n\t\tclientMqtt.subscribe(\"configuration/display\");\t\r\n\t\tclientMqtt.subscribe(\"configuration/debug\");\t\r\n\t\tclientMqtt.subscribe(\"configuration/robot/grid\");\t\r\n\t\tclientMqtt.subscribe(\"robot/grid\");\t\r\n\t\tclientMqtt.subscribe(\"environment/grid\");\r\n\t}\r\n\r\n\tpublic void publishState(JSONObject content) {\r\n\t\tString robotName = (String)((JSONObject)content.get(\"robot\")).get(\"id\");\r\n\t\t//JSONObject state = giveState(content,robotName);\r\n\t\t//clientMqtt.publish(robotName+\"/robot/state\", state.toJSONString());\t\r\n\t}\r\n\r\n\tpublic int isGoal(int x, int y) {\r\n\t\tfor(Goal g : goals) {\r\n\t\t\tif(g.getX() == x && g.getY() == y)\r\n\t\t\t\treturn g.getRobot();\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tpublic void createColorGrid(int width, int height, String title){\r\n\t\tcg = new ColorGrid(width,height,grid.getColumns(),grid.getRows(), title);\r\n\t\tfor(int i = 0; i < grid.getRows(); i++) {\r\n\t\t\tfor(int j = 0; j < grid.getColumns(); j++) {\r\n\t\t\t\tSituated elt = grid.getCell(i, j);\r\n\t\t\t\tif(elt.getComponentType() == ComponentType.empty) {\t\t\t\t\t\r\n\t\t\t\t\tif(isGoal(j,i) < 0) {\r\n\t\t\t\t\t\tcg.setBlockColor(j,i,colorgoal);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcg.setBlockColor(j,i,colorother);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if(elt.getComponentType() == ComponentType.robot)\r\n\t\t\t\t\tcg.setBlockColor(j,i,colorrobot);\r\n\t\t\t\telse if(elt.getComponentType() == ComponentType.obstacle)\r\n\t\t\t\t\tcg.setBlockColor(j,i,colorobstacle);\r\n\t\t\t\telse\r\n\t\t\t\t\tcg.setBlockColor(j,i,colorunknown);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcg.init();\r\n\t}\r\n\r\n\tpublic GridManagement(){\r\n\t\tthis.name = \"grid\";\r\n\t\tthis.debug = 0;\r\n\t\tthis.display = 0;\r\n\t\tgoals = new ArrayList<Goal>();\r\n\t}\r\n\r\n\tpublic void publishGridSize(){\r\n\t\t// size of the the complete grid\r\n\t\tJSONObject gridsize = new JSONObject();\r\n\t\tgridsize.put(\"rows\", \"\"+grid.getRows());\r\n\t\tgridsize.put(\"columns\", \"\"+grid.getColumns());\r\n\t\tclientMqtt.publish(\"inform/grid/init\", gridsize.toJSONString());\r\n\t}\r\n\r\n\tpublic void publishObstacles(){\r\n\t\tJSONArray ja = new JSONArray();\r\n\t\tList<Situated> lo = grid.get(ComponentType.obstacle);\r\n\t\tfor (Situated ob:lo) {\t\t\r\n\t\t\tJSONObject jo = new JSONObject();\r\n\t\t\tjo.put(\"x\", ob.getX()+\"\");\r\n\t\t\tjo.put(\"y\", ob.getY()+\"\");\r\n\t\t\tja.add(jo);\r\n\t\t}\r\n\t\tJSONObject obst = new JSONObject();\r\n\t\tobst.put(\"obstacles\", ja);\r\n\t\tclientMqtt.publish(\"inform/grid/obstacles\", obst.toJSONString());\r\n\t}\r\n\r\n\tpublic void init() {\r\n\t\tfor (int i = 0; i < nbObstacles; i++) {\r\n\t\t\tint[] pos = grid.locate();\r\n\t\t\tObstacle obs = new Obstacle(pos);\r\n\t\t\tgrid.putSituatedComponent(obs);\t\t\t\r\n\t\t}\r\n\t\tif(display == 1) { \r\n\t\t\tcreateColorGrid(displaywidth, displayheight, displaytitle);\t\t\t\r\n\t\t}\t\t\t\t\t\t\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setMessage(Message mqtt) {\r\n\t\tclientMqtt = mqtt;\r\n\t}\r\n\t\r\n\tpublic void refresh(){\r\n\t\tcg.refresh();\r\n\t}\r\n\r\n\tpublic boolean moveRobot(int id, int x1, int y1, int x2, int y2) {\r\n\t\tSituated elt = grid.getCell(y1, x1);\r\n\t\tif(elt.getComponentType() == ComponentType.robot) {\r\n\t\t\tRobotDescriptor eltR = (RobotDescriptor)elt;\r\n\t\t\tif(eltR.getId() == id) {\r\n\t\t\t\tgrid.moveSituatedComponent(x1,y1,x2,y2);\r\n\t\t\t\tif(display == 1) { \r\n\t\t\t\t\tcg.setBlockColor(x1,y1,colorother);\r\n\t\t\t\t\tcg.setBlockColor(x2,y2,colorrobot);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tpublic void displayGrid(){\r\n\t\tgrid.display();\r\n\t}\r\n\t\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tpublic JSONObject gridToJSONObject(int x, int y, int field) {\r\n\t\t\t\r\n\t\t// size of the the complete grid\r\n\t\tJSONObject jsongrid = new JSONObject();\r\n\t\t\r\n\t\t// obstacles definition\r\n\t\t\r\n\t\tJSONArray gt = new JSONArray();\r\n\t\tint xm = Math.max(x-field,0);\r\n\t\tint xM = Math.min(x+field,grid.getColumns()-1);\r\n\t\tint ym = Math.max(y-field,0);\r\n\t\tint yM = Math.min(y+field,grid.getRows()-1);\r\n\r\n\t\t//System.out.println(\"field \" + field + \" x \" + x + \" y \" + y);\r\n\t\t//System.out.println(\"xm \" + xm + \" xM \" + xM + \" ym \" + ym + \" yM \"+ yM);\r\n\r\n\t\tfor(int i = xm; i <= xM; i++){\r\n\t\t\tfor(int j = ym; j <= yM; j++){\r\n\t\t\t\tif(i != x || j != y) {\r\n\t\t\t\t\tSituated s = grid.getCell(j,i);\r\n\t\t\t\t\t//System.out.println(\"j \" + j + \" i \" + i + \" cell \" + s);\r\n\t\t\t\t\tJSONObject jo = new JSONObject();\r\n\t\t\t\t\tjo.put(\"type\", s.getComponentType()+\"\");\r\n\t\t\t\t\tif(s.getComponentType() == ComponentType.robot) {\r\n\t\t\t\t\t\tRobotDescriptor rd = (RobotDescriptor)s;\r\n\t\t\t\t\t\tjo.put(\"name\", rd.getName());\t\r\n\t\t\t\t\t\tjo.put(\"id\", rd.getId()+\"\");\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tjo.put(\"x\", s.getX()+\"\");\r\n\t\t\t\t\tjo.put(\"y\", s.getY()+\"\");\r\n\t\t\t\t\tgt.add(jo);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tjsongrid.put(\"x\", x);\r\n\t\tjsongrid.put(\"y\", y);\r\n\t\tjsongrid.put(\"field\", field);\r\n\t\tjsongrid.put(\"cells\", gt);\r\n\t\t\r\n\t\treturn jsongrid;\r\n\t}\r\n\t\r\n\tpublic void publishInitRobot() {\r\n\t\tList<Situated> ls = grid.get(ComponentType.robot);\r\n\t\tfor(Situated s:ls){\r\n\t\t\tRobotDescriptor rb = (RobotDescriptor)s;\r\n\t\t\tJSONObject jo = new JSONObject();\r\n\t\t\tjo.put(\"name\", rb.getName());\r\n\t\t\tjo.put(\"id\", rb.getId()+\"\");\r\n\t\t\tjo.put(\"x\", rb.getX()+\"\");\r\n\t\t\tjo.put(\"y\", rb.getY()+\"\");\r\n\t\t\tclientMqtt.publish(rb.getName()+\"/position/init\", jo.toJSONString());\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void handleMessage(String topic, JSONObject content){\r\n\t\t//System.out.println(\"Message:\"+ content.toJSONString());\r\n\t\tif (topic.contains(\"robot/nextPosition\")) {\r\n\t\t\t//System.out.println(\"UPDATE ROBOT\");\r\n\t\t\tString rn = (String)content.get(\"name\");\r\n\t\t\tint idr = Integer.parseInt((String)content.get(\"id\"));\r\n\t\t\tint xr = Integer.parseInt((String)content.get(\"x\"));\r\n\t\t\tint yr = Integer.parseInt((String)content.get(\"y\"));\r\n\t\t\tint xor = Integer.parseInt((String)content.get(\"xo\"));\r\n\t\t\tint yor = Integer.parseInt((String)content.get(\"yo\"));\r\n\t\t\t//System.out.println(\"MOVE MOVE \" + xor + \" \" + yor + \" --> \" + xr + \" \" + yr);\r\n\t\t\tgrid.moveSituatedComponent(xor,yor,xr,yr);\r\n\t\t\tif(display == 1) {\r\n\t\t\t\t//cg.setBlockColor(xor, yor, colorother);\t\t\t\t\r\n\t\t\t\tif(isGoal(xor,yor)<0) {\r\n\t\t\t\t\tcg.setBlockColor(xor,yor,colorgoal);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcg.setBlockColor(xor,yor,colorother);\r\n\t\t\t\t}\r\n\t\t\t\tcg.setBlockColor(xr, yr, colorrobot);\r\n\t\t\t\tcg.refresh();\r\n\t\t\t}\r\n\t\t\tif(debug == 1) {\r\n\t\t\t\tgrid.display();\r\n\t\t\t}\r\n\t\t}else if (topic.contains(\"configuration/nbRobot\")) {\r\n           \tnbRobots = Integer.parseInt((String)content.get(\"nbRobot\"));\r\n           \tfor(int i = 2; i < nbRobots+2; i++) {\r\n           \t\tint[] pos = grid.locate();           \t\r\n\t\t\t\tgrid.putSituatedComponent(new RobotDescriptor(pos, i, GridManagement.turtlebotName+i));\r\n\t\t\t\tif(display == 1) {\r\n\t\t\t\t\tcg.setBlockColor(pos[0], pos[1], colorrobot);\r\n\t\t\t\t\tcg.refresh();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tfor (int i = 2; i < nbRobots+2; i++) {\r\n\t\t\t\tint[] pos = grid.locate();\r\n\t\t\t\t// ec = (EmptyCell)grid.getCell(pos[1], pos[0]);\r\n\t\t\t\tgoals.add(new Goal(pos[0],pos[1],-1*i));\r\n\t\t\t\tif(display == 1) {\r\n\t\t\t\t\tcg.setBlockColor(pos[0], pos[1], colorgoal);\r\n\t\t\t\t\tcg.refresh();\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t\tif(debug == 1) {\r\n\t\t\t\tgrid.display(goals);\r\n\t\t\t}\r\n        }        \r\n        else if (topic.contains(\"configuration/robot/grid\")) {\r\n            String nameR = (String)content.get(\"name\");\r\n            int fieldr = Integer.parseInt((String)content.get(\"field\"));\r\n            int xr = Integer.parseInt((String)content.get(\"x\"));\r\n            int yr = Integer.parseInt((String)content.get(\"y\"));\r\n            JSONObject jo = gridToJSONObject(xr, yr, fieldr);\r\n            clientMqtt.publish(nameR+\"/grid/init\", jo.toJSONString());\r\n        }\r\n        else if (topic.contains(\"robot/grid\")) {\r\n            String nameR = (String)content.get(\"name\");\r\n            int fieldr = Integer.parseInt((String)content.get(\"field\"));\r\n            int xr = Integer.parseInt((String)content.get(\"x\"));\r\n            int yr = Integer.parseInt((String)content.get(\"y\"));\r\n            JSONObject jo = gridToJSONObject(xr, yr, fieldr);\r\n            clientMqtt.publish(nameR+\"/grid/update\", jo.toJSONString());\r\n        }\r\n\t\telse if (topic.contains(\"robot/nextPosition\")) {\r\n            publishState(content);\r\n        } \r\n\t\telse if (topic.contains(\"configuration/debug\")) {\r\n    \t    debug = Integer.parseInt((String)content.get(\"debug\"));\r\n        }\r\n        else if (topic.contains(\"configuration/display\")) {\r\n    \t    display = Integer.parseInt((String)content.get(\"display\"));\r\n    \t    if(display==1){\r\n   \t\t\t\tclientMqtt.subscribe(\"display/width\");\r\n\t\t\t\tclientMqtt.subscribe(\"display/height\");\r\n\t\t\t\tclientMqtt.subscribe(\"display/title\");\r\n\t\t\t\tclientMqtt.subscribe(\"display/robot\");\r\n\t\t\t\tclientMqtt.subscribe(\"display/goal\");\r\n\t\t\t\tclientMqtt.subscribe(\"display/obstacle\");\r\n\t\t\t\tclientMqtt.subscribe(\"display/other\");\r\n\t\t\t\tclientMqtt.subscribe(\"display/unknown\");\r\n    \t    }\r\n        }\r\n        else if (topic.contains(\"configuration/seed\")) {\r\n    \t    seed = Integer.parseInt((String)content.get(\"seed\"));\r\n        }\r\n        else if (topic.contains(\"configuration/nbObstacle\")) {\r\n    \t    nbObstacles = Integer.parseInt((String)content.get(\"nbObstacle\"));\r\n        }\r\n        else if (topic.contains(\"environment/grid\")) {\r\n    \t    rows = Integer.parseInt((String)content.get(\"rows\"));\r\n    \t    columns = Integer.parseInt((String)content.get(\"columns\"));\r\n    \t    grid = new Grid(rows, columns, seed);\r\n\t\t\tgrid.initEmpty();\r\n\t\t\tinit();\r\n        }\r\n        /*else if(topic.contains(\"burger_5/position\")) {\r\n        \tint x1 = Integer.parseInt((String)content.get(\"x1\"));\r\n        \tint y1 = Integer.parseInt((String)content.get(\"y1\"));\r\n        \tint x2 = Integer.parseInt((String)content.get(\"x2\"));\r\n        \tint y2 = Integer.parseInt((String)content.get(\"y2\"));\r\n            moveRobot(5,x1,y1,x2,y2);\r\n            if(display == 1)\r\n\t\t\t\trefresh();\r\n        } */       \r\n        else if(display == 1) {\r\n\t\t\tif (topic.contains(\"display/width\")) {\r\n    \t        displaywidth = Integer.parseInt((String)content.get(\"displaywidth\"));\r\n        \t}\r\n\t\t\telse if (topic.contains(\"display/height\")) {\r\n            \tdisplayheight = Integer.parseInt((String)content.get(\"displayheight\"));\r\n        \t}\r\n\t\t\telse if (topic.contains(\"display/title\")) {\r\n            \tdisplaytitle = (String)content.get(\"displaytitle\");\r\n        \t}\r\n        \telse if (topic.contains(\"display/robot\")) {\r\n            \tcolorrobot = new Color(Integer.parseInt((String)content.get(\"color\")));\r\n        \t}\r\n        \telse if (topic.contains(\"display/goal\")) {\r\n            \tcolorgoal = new Color(Integer.parseInt((String)content.get(\"color\")));\r\n        \t}\r\n        \telse if (topic.contains(\"display/obstacle\")) {\r\n            \tcolorobstacle = new Color(Integer.parseInt((String)content.get(\"color\")));\r\n        \t}\r\n        \telse if (topic.contains(\"display/other\")) {\r\n            \tcolorother = new Color(Integer.parseInt((String)content.get(\"color\")));\r\n        \t}\r\n        }\t\t\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/environnementburger/GridManagement.java b/src/environnementburger/GridManagement.java
--- a/src/environnementburger/GridManagement.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/environnementburger/GridManagement.java	(date 1652451334657)
@@ -84,7 +84,9 @@
 						cg.setBlockColor(j,i,colorother);
 					}
 				}
+//ICI
 				else if(elt.getComponentType() == ComponentType.robot)
+
 					cg.setBlockColor(j,i,colorrobot);
 				else if(elt.getComponentType() == ComponentType.obstacle)
 					cg.setBlockColor(j,i,colorobstacle);
@@ -153,6 +155,7 @@
 			RobotDescriptor eltR = (RobotDescriptor)elt;
 			if(eltR.getId() == id) {
 				grid.moveSituatedComponent(x1,y1,x2,y2);
+//ICI
 				if(display == 1) { 
 					cg.setBlockColor(x1,y1,colorother);
 					cg.setBlockColor(x2,y2,colorrobot);
@@ -243,6 +246,7 @@
 				} else {
 					cg.setBlockColor(xor,yor,colorother);
 				}
+//ICI
 				cg.setBlockColor(xr, yr, colorrobot);
 				cg.refresh();
 			}
@@ -255,6 +259,7 @@
            		int[] pos = grid.locate();           	
 				grid.putSituatedComponent(new RobotDescriptor(pos, i, GridManagement.turtlebotName+i));
 				if(display == 1) {
+//ICI
 					cg.setBlockColor(pos[0], pos[1], colorrobot);
 					cg.refresh();
 				}				
@@ -339,9 +344,19 @@
 			else if (topic.contains("display/title")) {
             	displaytitle = (String)content.get("displaytitle");
         	}
+//ICI
         	else if (topic.contains("display/robot")) {
             	colorrobot = new Color(Integer.parseInt((String)content.get("color")));
         	}
+			else if (topic.contains("display/poule")) {
+				colorrobot = new Color(Integer.parseInt((String)content.get("color")));
+			}
+			else if (topic.contains("display/vipere")) {
+				colorrobot = new Color(Integer.parseInt((String)content.get("color")));
+			}
+			else if (topic.contains("display/renard")) {
+				colorrobot = new Color(Integer.parseInt((String)content.get("color")));
+			}
         	else if (topic.contains("display/goal")) {
             	colorgoal = new Color(Integer.parseInt((String)content.get("color")));
         	}
Index: src/rosbridgeConnection/RosbridgeClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rosbridgeConnection;\r\n\r\nimport org.java_websocket.client.WebSocketClient;\r\nimport org.java_websocket.handshake.ServerHandshake;\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\n\r\n/* This class handles the connection with the Rosbridge websocket server */\r\npublic class RosbridgeClient {\r\n    private WebSocketClient wsc;\r\n    \r\n\r\n    public WebSocketClient getWsc () {\r\n        return wsc;\r\n    }\r\n\r\n    public void setWsc (WebSocketClient wsc) {\r\n        this.wsc = wsc;\r\n    }\r\n    \r\n    /* Connection to the webSocket */\r\n    public RosbridgeClient(String host, String port) {\r\n        try {\r\n            wsc = new WebSocketClient(new URI(\"ws://\" + host + \":\" + port)) {\r\n                @Override\r\n                public void onOpen(ServerHandshake arg0) {\r\n                    System.out.println(\"Connection opened\");\r\n                }\r\n\r\n                @Override\r\n                public void onMessage(String arg0) {\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onError(Exception arg0) {\r\n                    // TODO Auto-generated method stub\r\n                    System.out.println(\"Error\");\r\n                    arg0.printStackTrace();\r\n                }\r\n\r\n                @Override\r\n                public void onClose(int arg0, String arg1, boolean arg2) {\r\n                    // TODO Auto-generated method stub\r\n                    System.out.println(\"Connection closed\");\r\n                }\r\n            };\r\n            wsc.connect();\r\n\r\n        } catch (URISyntaxException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\tpublic void close() {\r\n\t\twsc.close();\r\n\t}\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/rosbridgeConnection/RosbridgeClient.java b/src/rosbridgeConnection/RosbridgeClient.java
--- a/src/rosbridgeConnection/RosbridgeClient.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/rosbridgeConnection/RosbridgeClient.java	(date 1650439141332)
@@ -8,7 +8,7 @@
 /* This class handles the connection with the Rosbridge websocket server */
 public class RosbridgeClient {
     private WebSocketClient wsc;
-    
+
 
     public WebSocketClient getWsc () {
         return wsc;
@@ -17,7 +17,7 @@
     public void setWsc (WebSocketClient wsc) {
         this.wsc = wsc;
     }
-    
+
     /* Connection to the webSocket */
     public RosbridgeClient(String host, String port) {
         try {
@@ -52,9 +52,9 @@
         }
     }
 
-	public void close() {
-		wsc.close();
-	}
+    public void close() {
+        wsc.close();
+    }
 
 
 }
Index: src/model/Grid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\n/* This model class defines the grid components */\r\npublic class Grid {\r\n    private Situated[][] grid;    \r\n    protected final int rows;\r\n    protected final int columns;\r\n    protected int nbRobots;\r\n    protected int nbObstacles;\r\n    private Random rnd;\r\n    \r\n    public Grid(int rows, int columns, int seed) {\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.grid = new Situated[rows][columns];\r\n        nbRobots = 0;\r\n        nbObstacles = 0;\r\n        rnd = new Random(seed);\r\n    }\r\n\r\n    public int[] locate() {\r\n        int l=-1, c = -1;\r\n        boolean locationNotFound = true; \r\n        while (locationNotFound) {\r\n            l = rnd.nextInt(rows);\r\n            c = rnd.nextInt(columns);\r\n            if (grid[l][c].getComponentType() == ComponentType.empty) {\r\n                locationNotFound = false;\r\n                //grid[l][c] = nb; \r\n            }\r\n        }\r\n        int [] result = {c,l};\r\n        return result;\r\n    }\r\n\r\n    public void initUnknown(){\r\n        for(int i=0; i < rows;i++){\r\n            for(int j=0; j < columns; j++){\r\n                grid[i][j]=new UnknownCell(j,i);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void display(ArrayList<Goal> gl){\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j < columns; j++) {\r\n                Situated s = getCell(i, j); \r\n                if(s.getComponentType() == ComponentType.empty) {\r\n                    boolean tt = false;\r\n                    for(Goal g : gl) {\r\n                        if(g.getX() == j && g.getY() == i) {\r\n                            System.out.print(\"   \" + g.getRobot());\r\n                            tt = true;\r\n                        }\r\n                    }\r\n                    if(!tt){\r\n                        System.out.print(\"   \" + s.display());\r\n                    }\r\n                } else {\r\n                    System.out.print(\"   \" + s.display());\r\n                }\r\n            }\r\n            System.out.println();       \r\n        }\r\n    }\r\n\r\n    public void display(){\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j < columns; j++) \r\n                System.out.print(\"   \" + getCell(i, j).display());\r\n            System.out.println();       \r\n        }\r\n    }\r\n\r\n    public void initEmpty(){\r\n        for(int i=0; i < rows;i++){\r\n            for(int j=0; j < columns; j++){\r\n                grid[i][j]=new EmptyCell(j,i);\r\n            }\r\n        }\r\n    }\r\n\r\n    public EmptyCell[] getAdjacentEmptyCell(int x, int y) {\r\n        EmptyCell[] ls = new EmptyCell[4];\r\n        ls[0] = null;\r\n        ls[1] = null;\r\n        ls[2] = null;\r\n        ls[3] = null;\r\n        Situated s;\r\n        if(y>0){\r\n           s = grid[y-1][x];\r\n            if(s.getComponentType() == ComponentType.empty) {\r\n                ls[0] = (EmptyCell)s;\r\n            }\r\n        }\r\n        if(y<rows-1) {\r\n            s = grid[y+1][x];\r\n            if(s.getComponentType() == ComponentType.empty) {\r\n                ls[1] = (EmptyCell)s;\r\n            }\r\n        }\r\n        if(x > 0){\r\n            s = grid[y][x-1];\r\n            if(s.getComponentType() == ComponentType.empty) {\r\n                ls[2] = (EmptyCell)s;\r\n            }\r\n        }\r\n        if(x<columns-1){\r\n            s = grid[y][x+1];\r\n            if(s.getComponentType() == ComponentType.empty) {\r\n                ls[3] = (EmptyCell)s;\r\n            }\r\n        }\r\n        return ls;\r\n    }\r\n       \r\n    public List<Situated> adjacentEmptyCell(int x, int y) {\r\n        List<Situated> adjacentPos = new ArrayList<Situated>();\r\n        Situated si;\r\n        if(validCoordinate(x,y)){\r\n            if (x > 0) {\r\n                si = grid[y][x-1];\r\n                if (si.getComponentType() == ComponentType.empty) \r\n                    adjacentPos.add(si);            \r\n            } \r\n            if (y > 0) {\r\n                si = grid[y-1][x];\r\n                if (si.getComponentType() == ComponentType.empty) \r\n                    adjacentPos.add(si);  \r\n            }\r\n            if (x < columns - 1) {\r\n                si = grid[y][x+1];\r\n                if (si.getComponentType() == ComponentType.empty) \r\n                    adjacentPos.add(si);                          \r\n            }\r\n            if (y < rows - 1) {\r\n                si = grid[y+1][x];\r\n                if (si.getComponentType() == ComponentType.empty) \r\n                    adjacentPos.add(si);  \r\n            }\r\n        }\r\n        return adjacentPos;\r\n    }\r\n    \r\n\r\n    public int getRows() {\r\n        return rows;\r\n    }\r\n\r\n    public int getColumns() {\r\n        return columns;\r\n    }\r\n\r\n    public Situated[][] getGrid() {\r\n        return grid;\r\n    }\r\n    \r\n    public Situated getCell(int r, int c) {\r\n    \treturn grid[r][c];\r\n    }\r\n\r\n    public String getCellsToString(int r, int c) {\r\n        String st = \"[\";\r\n        for(int i=0;i < 3;i++) {\r\n            for(int j=0;j < 3;j++) {\r\n                if((r-1+i)<0) {\r\n                    st += j + \",\" + i + \": null; \";\r\n                }\r\n                else if((r-1+i) >= rows) {\r\n                    st += j + \",\" + i + \": null; \";\r\n                } \r\n                else if((c-1+j)<0) {\r\n                    st += j + \",\" + i + \": null; \";\r\n                }\r\n                else if((c-1+j) >= columns) {\r\n                    st += j + \",\" + i + \": null; \";\r\n                } else {\r\n                    st += j + \",\" + i + \": \" + grid[(r-1+i)][(c-1+j)].display() + \"; \";\r\n                }\r\n            }    \r\n        }\r\n        st = st.substring(0, st.length() - 2);\r\n        return st+\"]\";\r\n    }\r\n    \r\n    public boolean validCoordinate(int x, int y) {\r\n    \treturn (x >= 0 && y >= 0 && x < columns && y < rows);\r\n    }\r\n\r\n    /**\r\n     * move the SituatedComponent from (ox,oy) to (dx, dy)\r\n     * @param ox origin abscissa of the situated component\r\n     * @param oy  origin ordinate of the situated component\r\n     * @param dx destination abscissa of the situated component\r\n     * @param dy  destination ordinate of the situated component\r\n     * @return true if the move has been done false else\r\n     */\r\n\tpublic boolean moveSituatedComponent(int ox, int oy, int dx, int dy) {\r\n\t\tSituated sc = removeSituatedComponent(ox,oy);\r\n\t\tif (sc != null) {\r\n\t\t\tsc.setLocation(dx,dy);\r\n\t\t\tputSituatedComponent(sc);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tpublic boolean putSituatedComponent(Situated sc) {\t\t\r\n\t\tif (validCoordinate(sc.getX(), sc.getY()) && grid[sc.getY()][sc.getX()].getComponentType() == ComponentType.empty) {\r\n\t\t\tgrid[sc.getY()][sc.getX()] = sc;\r\n            if(sc.getComponentType() == ComponentType.robot)\r\n                nbRobots++;\r\n            else if(sc.getComponentType() == ComponentType.obstacle)\r\n                nbObstacles++;\r\n\t\t\treturn true;\r\n\t\t}\t\t\r\n    \treturn false;\r\n\t}\r\n\r\n    public boolean forceSituatedComponent(Situated sc) {      \r\n        if (validCoordinate(sc.getX(), sc.getY())) {\r\n            grid[sc.getY()][sc.getX()] = sc;\r\n            if(sc.getComponentType() == ComponentType.robot)\r\n                nbRobots++;\r\n            else if(sc.getComponentType() == ComponentType.obstacle)\r\n                nbObstacles++;\r\n            return true;\r\n        }       \r\n        return false;\r\n    }\r\n\t\r\n\tpublic Situated removeSituatedComponent(int x, int y) {\r\n\t\tif (validCoordinate(x, y) && grid[y][x].getComponentType() != ComponentType.empty) {\r\n\t\t\tSituated sc = grid[y][x];\r\n\t\t\tgrid[y][x] = new EmptyCell(x, y);\r\n            if(sc.getComponentType() == ComponentType.robot)\r\n                nbRobots--;\r\n            else if(sc.getComponentType() == ComponentType.obstacle)\r\n                nbObstacles--;\r\n\t\t\treturn sc;\r\n\t\t}\t\t\r\n    \treturn null;\r\n\t}\r\n\r\n    public List<Situated> get(ComponentType ct){\r\n        List<Situated> result = new ArrayList<Situated>();\r\n        for(int i=0; i < rows; i++) {\r\n            for(int j=0; j < columns; j++) {\r\n                Situated elt = grid[i][j];\r\n                if(elt.getComponentType() == ct)\r\n                    result.add(elt);\r\n            }   \r\n        }\r\n        return result;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/Grid.java b/src/model/Grid.java
--- a/src/model/Grid.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/model/Grid.java	(date 1652449920601)
@@ -5,6 +5,8 @@
 import java.util.Random;
 
 /* This model class defines the grid components */
+
+//actual grid, add new teams
 public class Grid {
     private Situated[][] grid;    
     protected final int rows;
@@ -208,7 +210,7 @@
 		}
 		return false;
 	}
-	
+	//one for each of the teams
 	public boolean putSituatedComponent(Situated sc) {		
 		if (validCoordinate(sc.getX(), sc.getY()) && grid[sc.getY()][sc.getX()].getComponentType() == ComponentType.empty) {
 			grid[sc.getY()][sc.getX()] = sc;
Index: src/model/Situated.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport org.json.simple.JSONObject;\r\n\r\npublic interface Situated {\r\n\tpublic ComponentType getComponentType();\t\r\n\tpublic int getX();\r\n\tpublic int getY();\r\n\tpublic void setX(int x);\r\n\tpublic void setY(int y);\r\n\tpublic void setLocation(int x, int y);\r\n\tpublic String display();\r\n\tpublic JSONObject toJSON();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/Situated.java b/src/model/Situated.java
--- a/src/model/Situated.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/model/Situated.java	(date 1652448720590)
@@ -3,6 +3,7 @@
 import org.json.simple.JSONObject;
 
 public interface Situated {
+	//get color  & setter
 	public ComponentType getComponentType();	
 	public int getX();
 	public int getY();
Index: src/model/ComponentType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\npublic enum ComponentType {\r\n\trobot, empty, goal, obstacle, unknown;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/ComponentType.java b/src/model/ComponentType.java
--- a/src/model/ComponentType.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/model/ComponentType.java	(date 1652279055580)
@@ -1,5 +1,5 @@
 package model;
 
 public enum ComponentType {
-	robot, empty, goal, obstacle, unknown;
+	robot, empty, goal, obstacle, unknown,vipere, poule,renard;
 }
Index: src/burger/SmartTurtlebot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package burger;\r\n\r\nimport model.ComponentType;\r\nimport model.Situated;\r\nimport components.Turtlebot;\r\nimport model.EmptyCell;\r\nimport model.UnknownCell;\r\nimport model.Grid;\r\nimport mqtt.Message;\r\nimport java.util.Random;\r\nimport model.ObstacleDescriptor;\r\nimport model.RobotDescriptor;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport java.util.List;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class SmartTurtlebot extends Turtlebot{\r\n\tprotected Random rnd;\r\n\tprotected Grid grid;\r\n\r\n\tpublic SmartTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug) {\r\n\t\tsuper(id, name, seed, field, clientMqtt, debug);\r\n\t\trnd = new Random(seed);\t\r\n\t}\r\n\r\n\tprotected void init() {\r\n\t\tclientMqtt.subscribe(\"inform/grid/init\");\r\n    \tclientMqtt.subscribe(name + \"/position/init\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/grid/init\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/grid/update\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/action\");\t\t\r\n\t}\r\n\r\n\tpublic void handleMessage(String topic, JSONObject content){\t\t\t\t\r\n\t\tif (topic.contains(name+\"/grid/update\")) {\r\n      \t\tJSONArray ja = (JSONArray)content.get(\"cells\");\r\n      \t\tList<Situated> ls = grid.get(ComponentType.robot);\r\n      \t\tfor(int i=0; i < ja.size(); i++) {\r\n      \t\t\tJSONObject jo = (JSONObject)ja.get(i);\r\n\t        \tString typeCell = (String)jo.get(\"type\");\r\n    \t    \tint xo = Integer.parseInt((String)jo.get(\"x\"));\r\n    \t    \tint yo = Integer.parseInt((String)jo.get(\"y\"));\r\n        \t\tint[] to = new int[]{xo,yo};\r\n           \t\tif(typeCell.equals(\"robot\")) {\r\n           \t\t\tint idr = Integer.parseInt((String)jo.get(\"id\"));\r\n           \t\t\tboolean findr = false;\r\n           \t\t\tfor(Situated sss:ls) {\r\n           \t\t\t\tif(sss != this){\r\n\t           \t\t\t\tRobotDescriptor rd = (RobotDescriptor)sss;\r\n    \t       \t\t\t\tif(rd.getId() == idr) {\r\n        \t   \t\t\t\t\tgrid.moveSituatedComponent(rd.getX(), rd.getY(), xo, yo);\r\n           \t\t\t\t\t\tfindr = true;\r\n           \t\t\t\t\t\tbreak;\r\n           \t\t\t\t\t}\r\n           \t\t\t\t}\r\n           \t\t\t}\r\n           \t\t\tif(!findr) {\r\n\t           \t\t\tString namer = (String)jo.get(\"name\");\r\n    \t    \t\t\tgrid.forceSituatedComponent(new RobotDescriptor(to, idr, namer));\r\n    \t    \t\t}\r\n        \t\t} else {\r\n        \t\t\tSituated sg = grid.getCell(yo,xo);\r\n        \t\t\tSituated s;\r\n        \t\t\tif(sg.getComponentType() == ComponentType.unknown) {\r\n        \t\t\t\tif(typeCell.equals(\"obstacle\")){\r\n\t\t\t\t\t\t\t//System.out.println(\"Add ObstacleCell\");\r\n        \t\t\t\t\ts = new ObstacleDescriptor(to);\r\n        \t\t\t\t} else {\r\n        \t\t\t\t\t//System.out.println(\"Add EmptyCell \" + xo + \", \" + yo);\r\n        \t\t\t\t\ts = new EmptyCell(xo,yo);\r\n        \t\t\t\t}\r\n        \t\t\t\tgrid.forceSituatedComponent(s);\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n      \t\tif(debug == 1) {\r\n\t\t   \t\tSystem.out.println(\"---- \" + name + \" ----\");\r\n        \t\tgrid.display();\r\n        \t}\r\n        } else if (topic.contains(name+\"/action\")) {\r\n    \t    int stepr = Integer.parseInt((String)content.get(\"step\"));\r\n        \tmove(stepr);\r\n        } else if (topic.contains(\"inform/grid/init\")) {\r\n        \tint rows = Integer.parseInt((String)content.get(\"rows\"));\r\n        \tint columns = Integer.parseInt((String)content.get(\"columns\"));\r\n        \tgrid = new Grid(rows, columns, seed);\r\n\t\t\tgrid.initUnknown();\r\n\t\t    grid.forceSituatedComponent(this);\r\n\t\t}\r\n        else if (topic.contains(name+\"/position/init\")) {\r\n      \t\tx = Integer.parseInt((String)content.get(\"x\"));\r\n        \ty = Integer.parseInt((String)content.get(\"y\"));\r\n        }\r\n        else if (topic.contains(name+\"/grid/init\")) {\r\n      \t\tJSONArray ja = (JSONArray)content.get(\"cells\");\r\n      \t\tfor(int i=0; i < ja.size(); i++) {\r\n      \t\t\tJSONObject jo = (JSONObject)ja.get(i);\r\n\t        \tString typeCell = (String)jo.get(\"type\");\r\n    \t    \tint xo = Integer.parseInt((String)jo.get(\"x\"));\r\n    \t    \tint yo = Integer.parseInt((String)jo.get(\"y\"));\r\n        \t\tint[] to = new int[]{xo,yo};\r\n        \t\tSituated s;\r\n\t\t\t\tif(typeCell.equals(\"obstacle\")){\r\n\t\t\t\t\t//System.out.println(\"Add ObstacleCell\");\r\n        \t\t\ts = new ObstacleDescriptor(to);\r\n        \t\t}\r\n        \t\telse if(typeCell.equals(\"robot\")){\r\n        \t\t\t//System.out.println(\"Add RobotCell\");\r\n        \t\t\tint idr = Integer.parseInt((String)jo.get(\"id\"));\r\n        \t\t\tString namer = (String)jo.get(\"name\");\r\n        \t\t\ts = new RobotDescriptor(to, idr, namer);\r\n        \t\t}\r\n        \t\telse {\r\n        \t\t\t//System.out.println(\"Add EmptyCell \" + xo + \", \" + yo);\r\n        \t\t\ts = new EmptyCell(xo,yo);\r\n        \t\t}\r\n        \t\tgrid.forceSituatedComponent(s);\r\n      \t\t}\r\n        }\r\n\t}\r\n\r\n\tpublic void setLocation(int x, int y) {\r\n\t\tint xo = this.x;\r\n\t\tint yo = this.y;\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tgrid.moveSituatedComponent(xo, yo, x, y);\r\n\t}\r\n\r\n\tpublic Grid getGrid() {\r\n\t\treturn grid;\r\n\t}\r\n\r\n\tpublic void setGrid(Grid grid) {\r\n\t\tthis.grid = grid;\r\n\t}\r\n\r\n\tpublic void randomOrientation() {\r\n\t\tdouble d = Math.random();\r\n\t\tOrientation oldo = orientation;\r\n\t\tif(d < 0.25) {\r\n\t\t\tif(orientation != Orientation.up) \r\n\t\t\t\torientation = Orientation.up;\r\n\t\t\telse \r\n\t\t\t\torientation = Orientation.down;\r\n\t\t}\r\n\t\telse if(d < 0.5) {\r\n\t\t\tif(orientation != Orientation.down) \r\n\t\t\t\torientation = Orientation.down;\r\n\t\t\telse \r\n\t\t\t\torientation = Orientation.up;\r\n\t\t}\r\n\t\telse if(d < 0.75) {\r\n\t\t\tif(orientation != Orientation.left) \r\n\t\t\t\torientation = Orientation.left;\r\n\t\t\telse \r\n\t\t\t\torientation = Orientation.right;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(orientation != Orientation.right) \r\n\t\t\t\torientation = Orientation.right;\r\n\t\t\telse \r\n\t\t\t\torientation = Orientation.left;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void move(int step) {\r\n\t\tString actionr = \"move_forward\";\r\n\t\tString result = x + \",\" + y + \",\" + orientation + \",\" + grid.getCellsToString(y,x) + \",\";\r\n\t\tfor(int i = 0; i < step; i++) {\r\n\t\t\tEmptyCell[] ec = grid.getAdjacentEmptyCell(x,y);\r\n\t\t\tif(orientation == Orientation.up) {\r\n\t\t\t\tif(ec[3] != null) {\r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\t}\r\n\t\t\t\telse { \r\n\t\t\t\t\t//randomOrientation();\r\n\t\t\t\t\tdouble d = Math.random();\r\n\t\t\t\t\tif(d < 0.5) {\r\n\t\t\t\t\t\tmoveLeft(1);\r\n\t\t\t\t\t\tactionr = \"turn_left\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveRight(1);\r\n\t\t\t\t\t\tactionr = \"turn_right\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.down) {\r\n\t\t\t\tif(ec[2] != null) {\r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//randomOrientation();\r\n\t\t\t\t\tdouble d = Math.random();\r\n\t\t\t\t\tif(d < 0.5) {\r\n\t\t\t\t\t\tmoveLeft(1);\r\n\t\t\t\t\t\tactionr = \"turn_left\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveRight(1);\r\n\t\t\t\t\t\tactionr = \"turn_right\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.right) {\r\n\t\t\t\tif(ec[1] != null) { \r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//randomOrientation();\r\n\t\t\t\t\tdouble d = Math.random();\r\n\t\t\t\t\tif(d < 0.5) {\r\n\t\t\t\t\t\tmoveLeft(1);\r\n\t\t\t\t\t\tactionr = \"turn_left\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveRight(1);\r\n\t\t\t\t\t\tactionr = \"turn_right\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.left) {\r\n\t\t\t\tif(ec[0] != null) {\r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//randomOrientation();\r\n\t\t\t\t\tdouble d = Math.random();\r\n\t\t\t\t\tif(d < 0.5) {\r\n\t\t\t\t\t\tmoveLeft(1);\r\n\t\t\t\t\t\tactionr = \"turn_left\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveRight(1);\r\n\t\t\t\t\t\tactionr = \"turn_right\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(debug==2){\r\n\t\t\ttry{\r\n\t\t\t\twriter.write(result + actionr); \r\n\t\t\t\twriter.newLine();\r\n\t\t\t\twriter.flush();\r\n\t\t\t} catch(IOException ioe){\r\n\t\t\t\tSystem.out.println(ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void moveLeft(int step) {\r\n\t\tOrientation oldo = orientation;\r\n\t\tfor(int i = 0; i < step; i++){\r\n\t\t\tif(orientation == Orientation.up) {\r\n\t\t\t\torientation = Orientation.left;\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.left) {\r\n\t\t\t\torientation = Orientation.down;\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.right) {\r\n\t\t\t\torientation = Orientation.up;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\torientation = Orientation.right;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void moveRight(int step) {\r\n\t\tOrientation oldo = orientation;\r\n\t\tfor(int i = 0; i < step; i++){\r\n\t\t\tif(orientation == Orientation.up) {\r\n\t\t\t\torientation = Orientation.right;\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.left) {\r\n\t\t\t\torientation = Orientation.up;\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.right) {\r\n\t\t\t\torientation = Orientation.down;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\torientation = Orientation.left;\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\tpublic void moveForward() {\r\n\t\tint xo = x;\r\n\t\tint yo = y;\r\n\t\tif(orientation == Orientation.up) {\r\n\t\t\tx += 1;\r\n\t\t\tx = Math.min(x,grid.getColumns()-1);\r\n\t\t}\r\n\t\telse if(orientation == Orientation.left) {\r\n\t\t\ty -= 1;\r\n\t\t\ty = Math.max(y,0);\r\n\t\t}\r\n\t\telse if(orientation == Orientation.right) {\r\n\t\t\ty += 1;\r\n\t\t\ty = Math.min(y,grid.getRows()-1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tx -= 1;\r\n\t\t\tx = Math.max(x,0);\r\n\t\t}\t\r\n\t\tgrid.moveSituatedComponent(xo,yo,x,y);\r\n\t\tJSONObject robotj = new JSONObject();\r\n\t\trobotj.put(\"name\", name);\r\n\t\trobotj.put(\"id\", \"\"+id);\r\n\t\trobotj.put(\"x\", \"\"+x);\r\n\t\trobotj.put(\"y\", \"\"+y);\r\n\t\trobotj.put(\"xo\", \"\"+xo);\r\n\t\trobotj.put(\"yo\", \"\"+yo);\r\n\t\t//System.out.println(\"MOVE MOVE \" + xo + \" \" + yo + \" --> \" + x + \" \" + y);\r\n\t\tclientMqtt.publish(\"robot/nextPosition\", robotj.toJSONString());\r\n\t}\r\n\r\n\tpublic void moveBackward() {\r\n\t\t\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/burger/SmartTurtlebot.java b/src/burger/SmartTurtlebot.java
--- a/src/burger/SmartTurtlebot.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/burger/SmartTurtlebot.java	(date 1652279906858)
@@ -21,14 +21,14 @@
 	protected Random rnd;
 	protected Grid grid;
 
-	public SmartTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug) {
-		super(id, name, seed, field, clientMqtt, debug);
+	public SmartTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug,ComponentType team) {
+		super(id, name, seed, field, clientMqtt, debug, team);
 		rnd = new Random(seed);	
 	}
 
 	protected void init() {
 		clientMqtt.subscribe("inform/grid/init");
-    	clientMqtt.subscribe(name + "/position/init");		
+    	clientMqtt.subscribe(name + "/position/init");
 		clientMqtt.subscribe(name + "/grid/init");		
 		clientMqtt.subscribe(name + "/grid/update");		
 		clientMqtt.subscribe(name + "/action");		
Index: src/burger/RealTurtlebot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package burger;\r\n\r\nimport model.ComponentType;\r\nimport model.Situated;\r\nimport components.Turtlebot;\r\nimport model.EmptyCell;\r\nimport model.UnknownCell;\r\nimport model.Grid;\r\n\r\nimport mqtt.Message;\r\nimport rosbridgeConnection.RosbridgeClient;\r\n\r\nimport model.ObstacleDescriptor;\r\nimport model.RobotDescriptor;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport java.util.List;\r\n\r\npublic class RealTurtlebot extends Turtlebot{\r\n\tprotected Grid grid;\r\n\tprotected RosbridgeClient clientRosbridge;\r\n\tpublic static int waitTimeCommunication = 300;\r\n\tpublic static int waitTimeAction= 4000;\r\n\tpublic static String ip = \"10.200.3.101\"; //\"10.3.143.1\";\r\n\tpublic static String port = \"9090\";\r\n\r\n\tpublic RealTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug) {\r\n\t\tsuper(id, name, seed, field, clientMqtt, debug);\r\n\t\tclientRosbridge = new RosbridgeClient(RealTurtlebot.ip, RealTurtlebot.port);\r\n\t}\r\n\r\n\t\tprotected void init() {\r\n\t\tclientMqtt.subscribe(\"inform/grid/init\");\r\n    \tclientMqtt.subscribe(name + \"/position/init\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/grid/init\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/grid/update\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/action\");\t\t\r\n\t}\r\n\r\n\tpublic void handleMessage(String topic, JSONObject content){\t\t\t\t\r\n\t\tif (topic.contains(name+\"/grid/update\")) {\r\n      \t\tJSONArray ja = (JSONArray)content.get(\"cells\");\r\n      \t\tList<Situated> ls = grid.get(ComponentType.robot);\r\n      \t\tfor(int i=0; i < ja.size(); i++) {\r\n      \t\t\tJSONObject jo = (JSONObject)ja.get(i);\r\n\t        \tString typeCell = (String)jo.get(\"type\");\r\n    \t    \tint xo = Integer.parseInt((String)jo.get(\"x\"));\r\n    \t    \tint yo = Integer.parseInt((String)jo.get(\"y\"));\r\n        \t\tint[] to = new int[]{xo,yo};\r\n           \t\tif(typeCell.equals(\"robot\")) {\r\n           \t\t\tint idr = Integer.parseInt((String)jo.get(\"id\"));\r\n           \t\t\tboolean findr = false;\r\n           \t\t\tfor(Situated sss:ls) {\r\n           \t\t\t\tif(sss != this){\r\n\t           \t\t\t\tRobotDescriptor rd = (RobotDescriptor)sss;\r\n    \t       \t\t\t\tif(rd.getId() == idr) {\r\n        \t   \t\t\t\t\tgrid.moveSituatedComponent(rd.getX(), rd.getY(), xo, yo);\r\n           \t\t\t\t\t\tfindr = true;\r\n           \t\t\t\t\t\tbreak;\r\n           \t\t\t\t\t}\r\n           \t\t\t\t}\r\n           \t\t\t}\r\n           \t\t\tif(!findr) {\r\n\t           \t\t\tString namer = (String)jo.get(\"name\");\r\n    \t    \t\t\tgrid.forceSituatedComponent(new RobotDescriptor(to, idr, namer));\r\n    \t    \t\t}\r\n        \t\t} else {\r\n        \t\t\tSituated sg = grid.getCell(yo,xo);\r\n        \t\t\tSituated s;\r\n        \t\t\tif(sg.getComponentType() == ComponentType.unknown) {\r\n        \t\t\t\tif(typeCell.equals(\"obstacle\")){\r\n\t\t\t\t\t\t\t//System.out.println(\"Add ObstacleCell\");\r\n        \t\t\t\t\ts = new ObstacleDescriptor(to);\r\n        \t\t\t\t} else {\r\n        \t\t\t\t\t//System.out.println(\"Add EmptyCell \" + xo + \", \" + yo);\r\n        \t\t\t\t\ts = new EmptyCell(xo,yo);\r\n        \t\t\t\t}\r\n        \t\t\t\tgrid.forceSituatedComponent(s);\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n      \t\tif(debug == 1) {\r\n\t\t   \t\tSystem.out.println(\"---- \" + name + \" ----\");\r\n        \t\tgrid.display();\r\n        \t}\r\n        } else if (topic.contains(name+\"/action\")) {\r\n    \t    int stepr = Integer.parseInt((String)content.get(\"step\"));\r\n        \tmove(stepr);\r\n        } else if (topic.contains(\"inform/grid/init\")) {\r\n        \tint rows = Integer.parseInt((String)content.get(\"rows\"));\r\n        \tint columns = Integer.parseInt((String)content.get(\"columns\"));\r\n        \tgrid = new Grid(rows, columns, seed);\r\n\t\t\tgrid.initUnknown();\r\n\t\t    grid.forceSituatedComponent(this);\r\n\t\t}\r\n        else if (topic.contains(name+\"/position/init\")) {\r\n      \t\tx = Integer.parseInt((String)content.get(\"x\"));\r\n        \ty = Integer.parseInt((String)content.get(\"y\"));\r\n        }\r\n        else if (topic.contains(name+\"/grid/init\")) {\r\n      \t\tJSONArray ja = (JSONArray)content.get(\"cells\");\r\n      \t\tfor(int i=0; i < ja.size(); i++) {\r\n      \t\t\tJSONObject jo = (JSONObject)ja.get(i);\r\n\t        \tString typeCell = (String)jo.get(\"type\");\r\n    \t    \tint xo = Integer.parseInt((String)jo.get(\"x\"));\r\n    \t    \tint yo = Integer.parseInt((String)jo.get(\"y\"));\r\n        \t\tint[] to = new int[]{xo,yo};\r\n        \t\tSituated s;\r\n\t\t\t\tif(typeCell.equals(\"obstacle\")){\r\n\t\t\t\t\t//System.out.println(\"Add ObstacleCell\");\r\n        \t\t\ts = new ObstacleDescriptor(to);\r\n        \t\t}\r\n        \t\telse if(typeCell.equals(\"robot\")){\r\n        \t\t\t//System.out.println(\"Add RobotCell\");\r\n        \t\t\tint idr = Integer.parseInt((String)jo.get(\"id\"));\r\n        \t\t\tString namer = (String)jo.get(\"name\");\r\n        \t\t\ts = new RobotDescriptor(to, idr, namer);\r\n        \t\t}\r\n        \t\telse {\r\n        \t\t\t//System.out.println(\"Add EmptyCell \" + xo + \", \" + yo);\r\n        \t\t\ts = new EmptyCell(xo,yo);\r\n        \t\t}\r\n        \t\tgrid.forceSituatedComponent(s);\r\n      \t\t}\r\n        }\r\n\t}\r\n\r\n\tpublic void setLocation(int x, int y) {\r\n\t\tint xo = this.x;\r\n\t\tint yo = this.y;\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tgrid.moveSituatedComponent(xo, yo, x, y);\r\n\t}\r\n\r\n\tpublic String display(){\r\n\t\treturn super.toString();\r\n\t}\r\n\r\n\tpublic boolean isGoalReached(){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic void move(int step) {\r\n\t\tSystem.out.println(step);\r\n\t}\r\n\r\n\tpublic void moveForward() {\r\n\t\tJSONObject message = new JSONObject();\r\n\t\tmessage.put(\"topic\", \"/\" + name + \"/robot_command\");\r\n\t\tJSONObject msg = new JSONObject();\r\n\t\tmsg.put(\"data\", \"forward\");\r\n\t\tmessage.put(\"msg\", msg);\r\n\t\tmessage.put(\"op\", \"publish\");\r\n\r\n\t\tclientRosbridge.getWsc().send(message.toJSONString());\r\n\t\tSystem.out.println(\"Message ROS\" + message.toJSONString());\r\n\t\ttry {\r\n\t\t\tThread.sleep(RealTurtlebot.waitTimeAction);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void moveBackward() {\r\n\t\tJSONObject message = new JSONObject();\r\n\t\tmessage.put(\"topic\", \"/\" + name + \"/robot_command\");\r\n\t\tJSONObject msg = new JSONObject();\r\n\t\tmsg.put(\"data\", \"backward\");\r\n\t\tmessage.put(\"msg\", msg);\r\n\t\tmessage.put(\"op\", \"publish\");\r\n\r\n\t\tclientRosbridge.getWsc().send(message.toJSONString());\r\n\r\n\t\ttry {\r\n\t\t\tThread.sleep(RealTurtlebot.waitTimeAction);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\t/* Rotate the robot to the left */\r\n\tpublic void moveLeft(int step) {\r\n\t\tfor (int i = 0; i < step; i++) {\r\n\t\t\tJSONObject message = new JSONObject();\r\n\t\t\tmessage.put(\"topic\", \"/\" + name + \"/robot_command\");\r\n\t\t\tJSONObject msg = new JSONObject();\r\n\t\t\tmsg.put(\"data\", \"left\");\r\n\t\t\tmessage.put(\"msg\", msg);\r\n\t\t\tmessage.put(\"op\", \"publish\");\r\n\r\n\t\t\tclientRosbridge.getWsc().send(message.toJSONString());\r\n\r\n\t\t\ttry {\r\n\t\t\t\tThread.sleep(RealTurtlebot.waitTimeAction);\r\n\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* Rotate the robot to the right */\r\n\tpublic void moveRight(int step) {\r\n\t\tfor (int i = 0; i < step; i++) {\r\n\t\t\tJSONObject message = new JSONObject();\r\n\t\t\tmessage.put(\"topic\", \"/\" + name + \"/robot_command\");\r\n\t\t\tJSONObject msg = new JSONObject();\r\n\t\t\tmsg.put(\"data\", \"right\");\r\n\t\t\tmessage.put(\"msg\", msg);\r\n\t\t\tmessage.put(\"op\", \"publish\");\r\n\r\n\t\t\tclientRosbridge.getWsc().send(message.toJSONString());\r\n\r\n\t\t\ttry {\r\n\t\t\t\tThread.sleep(RealTurtlebot.waitTimeAction);\r\n\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/* Stop the robot */\r\n\tpublic void stopRobot() {\r\n\t\tJSONObject message = new JSONObject();\r\n\t\tmessage.put(\"topic\", \"/\" + name + \"/cmd_vel\");\r\n\t\tJSONObject msg = new JSONObject();\r\n\t\tJSONObject linear = new JSONObject();\r\n\t\tlinear.put(\"x\", 0.0);\r\n\t\tlinear.put(\"y\", 0.0);\r\n\t\tlinear.put(\"z\", 0.0);\r\n\t\tJSONObject angular = new JSONObject();\r\n\t\tangular.put(\"x\", 0.0);\r\n\t\tangular.put(\"y\", 0.0);\r\n\t\tangular.put(\"z\", 0.0);\r\n\r\n\t\tmsg.put(\"linear\", linear);\r\n\t\tmsg.put(\"angular\", angular);\r\n\r\n\t\tmessage.put(\"msg\", msg);\r\n\r\n\t\tmessage.put(\"op\", \"publish\");\r\n\r\n\t\tclientRosbridge.getWsc().send(message.toJSONString());\r\n\t}\t\r\n\r\n\t/* Move the robot straight */\r\n\tpublic void moveRobot() {\r\n\t\tJSONObject message = new JSONObject();\r\n\t\tmessage.put(\"topic\", \"/\" + name + \"/cmd_vel\");\r\n\t\tJSONObject msg = new JSONObject();\r\n\t\tJSONObject twist1 = new JSONObject();\r\n\t\tJSONObject linear = new JSONObject();\r\n\t\tlinear.put(\"x\", 0.040);\r\n\t\tlinear.put(\"y\", 0.0);\r\n\t\tlinear.put(\"z\", 0.0);\r\n\t\tJSONObject angular = new JSONObject();\r\n\t\tangular.put(\"x\", 0.0);\r\n\t\tangular.put(\"y\", 0.0);\r\n\t\tangular.put(\"z\", 0.0);\r\n\r\n\t\ttwist1.put(\"linear\", linear);\r\n\t\ttwist1.put(\"angular\", angular);\r\n\r\n\t\tmsg.put(\"linear\", linear);\r\n\t\tmsg.put(\"angular\", angular);\r\n\r\n\t\tmessage.put(\"msg\", msg);\r\n\r\n\t\tmessage.put(\"op\", \"publish\");\r\n\r\n\t\tclientRosbridge.getWsc().send(message.toJSONString());\r\n\r\n\t\ttry {\r\n\t\t\tThread.sleep(RealTurtlebot.waitTimeAction);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tstopRobot();\r\n\t}\r\n\r\n\t/* Rotate the robot to the left */\r\n\tpublic void rotateLeft(int step) {\r\n\t\tfor (int i = 0; i < step; i++) {\r\n\t\t\tJSONObject message = new JSONObject();\r\n\t\t\tmessage.put(\"topic\", \"/\" + name + \"/cmd_vel\");\r\n\t\t\tJSONObject msg = new JSONObject();\r\n\t\t\tJSONObject linear = new JSONObject();\r\n\t\t\tlinear.put(\"x\", 0.0);\r\n\t\t\tlinear.put(\"y\", 0.0);\r\n\t\t\tlinear.put(\"z\", 0.0);\r\n\t\t\tJSONObject angular = new JSONObject();\r\n\t\t\tangular.put(\"x\", 0.0);\r\n\t\t\tangular.put(\"y\", 0.0);\r\n\t\t\tangular.put(\"z\", 1.0);\r\n\r\n\t\t\tmsg.put(\"linear\", linear);\r\n\t\t\tmsg.put(\"angular\", angular);\r\n\r\n\t\t\tmessage.put(\"msg\", msg);\r\n\r\n\t\t\tmessage.put(\"op\", \"publish\");\r\n\r\n\t\t\tclientRosbridge.getWsc().send(message.toJSONString());\r\n\r\n\t\t\t/*\r\n\t\t\t * Time required to rotate the robot 90 degrees while doing 1m/s is 1.6 seconds\r\n\t\t\t */\r\n\t\t\ttry {\r\n\t\t\t\tThread.sleep(RealTurtlebot.waitTimeCommunication);\r\n\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tstopRobot();\r\n\t\t}\r\n\t}\r\n\r\n\t/* Rotate the robot to the right */\r\n\tpublic void rotateRight(int step) {\r\n\t\tfor (int i = 0; i < step; i++) {\r\n\t\t\tJSONObject message = new JSONObject();\r\n\t\t\tmessage.put(\"topic\", \"/\" + name + \"/cmd_vel\");\r\n\t\t\tJSONObject msg = new JSONObject();\r\n\t\t\tJSONObject linear = new JSONObject();\r\n\t\t\tlinear.put(\"x\", 0.0);\r\n\t\t\tlinear.put(\"y\", 0.0);\r\n\t\t\tlinear.put(\"z\", 0.0);\r\n\t\t\tJSONObject angular = new JSONObject();\r\n\t\t\tangular.put(\"x\", 0.0);\r\n\t\t\tangular.put(\"y\", 0.0);\r\n\t\t\tangular.put(\"z\", -1.0);\r\n\r\n\t\t\tmsg.put(\"linear\", linear);\r\n\t\t\tmsg.put(\"angular\", angular);\r\n\r\n\t\t\tmessage.put(\"msg\", msg);\r\n\r\n\t\t\tmessage.put(\"op\", \"publish\");\r\n\r\n\t\t\tclientRosbridge.getWsc().send(message.toJSONString());\r\n\r\n\t\t\t/*\r\n\t\t\t * Time required to rotate the robot 90 degrees while doing 1m/s is 1.6 seconds\r\n\t\t\t */\r\n\t\t\ttry {\r\n\t\t\t\tThread.sleep(RealTurtlebot.waitTimeCommunication);\r\n\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tstopRobot();\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/burger/RealTurtlebot.java b/src/burger/RealTurtlebot.java
--- a/src/burger/RealTurtlebot.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/burger/RealTurtlebot.java	(date 1652279798591)
@@ -24,8 +24,8 @@
 	public static String ip = "10.200.3.101"; //"10.3.143.1";
 	public static String port = "9090";
 
-	public RealTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug) {
-		super(id, name, seed, field, clientMqtt, debug);
+	public RealTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug,ComponentType team) {
+		super(id, name, seed, field, clientMqtt, debug, team);
 		clientRosbridge = new RosbridgeClient(RealTurtlebot.ip, RealTurtlebot.port);
 	}
 
Index: src/burger/RandomTurtlebot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package burger;\r\n\r\nimport model.ComponentType;\r\nimport model.Situated;\r\nimport components.Turtlebot;\r\nimport model.EmptyCell;\r\nimport model.UnknownCell;\r\nimport mqtt.Message;\r\nimport java.util.Random;\r\nimport model.ObstacleDescriptor;\r\nimport model.RobotDescriptor;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class RandomTurtlebot extends Turtlebot{\r\n\tprotected Random rnd;\r\n\tprotected List<Situated> grid;\r\n\tprotected int rows;\r\n\tprotected int columns;\r\n\r\n\tpublic RandomTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug) {\r\n\t\tsuper(id, name, seed, field, clientMqtt, debug);\r\n\t\trnd = new Random(seed);\r\n\t\tgrid = new ArrayList<Situated>();\t\r\n\t}\r\n\r\n\tprotected void init() {\r\n\t\tclientMqtt.subscribe(\"inform/grid/init\");\r\n    \tclientMqtt.subscribe(name + \"/position/init\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/grid/init\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/grid/update\");\t\t\r\n\t\tclientMqtt.subscribe(name + \"/action\");\t\t\r\n\t}\r\n\r\n\tpublic void handleMessage(String topic, JSONObject content){\t\t\t\t\r\n\t\tif (topic.contains(name+\"/grid/update\")) {\r\n\t\t\tgrid = new ArrayList<Situated>();\r\n      \t\tJSONArray ja = (JSONArray)content.get(\"cells\");\r\n      \t\tfor(int i=0; i < ja.size(); i++) {\r\n      \t\t\tJSONObject jo = (JSONObject)ja.get(i);\r\n\t        \tString typeCell = (String)jo.get(\"type\");\r\n    \t    \tint xo = Integer.parseInt((String)jo.get(\"x\"));\r\n    \t    \tint yo = Integer.parseInt((String)jo.get(\"y\"));\r\n        \t\tint[] to = new int[]{xo,yo};\r\n           \t\tif(typeCell.equals(\"robot\")) {\r\n           \t\t\tint idr = Integer.parseInt((String)jo.get(\"id\"));\r\n           \t\t\tString namer = (String)jo.get(\"name\");\r\n           \t\t\tif(idr != id){\r\n\t    \t    \t\tgrid.add(new RobotDescriptor(to, idr, namer));\r\n\t    \t    \t}\r\n        \t\t} else if(typeCell.equals(\"obstacle\")){\r\n\t\t\t\t\t//System.out.println(\"Add ObstacleCell\");\r\n        \t\t\tgrid.add(new ObstacleDescriptor(to));\r\n        \t\t} else {\r\n        \t\t\t//System.out.println(\"Add EmptyCell \" + xo + \", \" + yo);\r\n        \t\t\tgrid.add(new EmptyCell(xo,yo));\r\n    \t\t\t}\r\n    \t\t}\r\n      \t\tif(debug == 1) {\r\n\t\t   \t\tSystem.out.println(\"---- \" + name + \" ----\");\r\n        \t\tfor(Situated s:grid){\r\n        \t\t\ts.display();\r\n        \t\t}\r\n        \t}\r\n        } else if (topic.contains(name+\"/action\")) {\r\n    \t    int stepr = Integer.parseInt((String)content.get(\"step\"));\r\n        \tmove(stepr);\r\n        } \r\n        else if (topic.contains(\"inform/grid/init\")) {\r\n        \trows = Integer.parseInt((String)content.get(\"rows\"));\r\n        \tcolumns = Integer.parseInt((String)content.get(\"columns\"));\r\n        }\r\n        else if (topic.contains(name+\"/position/init\")) {\r\n      \t\tx = Integer.parseInt((String)content.get(\"x\"));\r\n        \ty = Integer.parseInt((String)content.get(\"y\"));\r\n        }\r\n        else if (topic.contains(name+\"/grid/init\")) {\r\n        \tgrid = new ArrayList<Situated>();\r\n      \t\tJSONArray ja = (JSONArray)content.get(\"cells\");\r\n      \t\tfor(int i=0; i < ja.size(); i++) {\r\n      \t\t\tJSONObject jo = (JSONObject)ja.get(i);\r\n\t        \tString typeCell = (String)jo.get(\"type\");\r\n    \t    \tint xo = Integer.parseInt((String)jo.get(\"x\"));\r\n    \t    \tint yo = Integer.parseInt((String)jo.get(\"y\"));\r\n        \t\tint[] to = new int[]{xo,yo};\r\n           \t\tif(typeCell.equals(\"robot\")) {\r\n           \t\t\tint idr = Integer.parseInt((String)jo.get(\"id\"));\r\n           \t\t\tboolean findr = false;\r\n           \t\t\tString namer = (String)jo.get(\"name\");\r\n    \t    \t\tif(idr != id){\r\n\t    \t    \t\tgrid.add(new RobotDescriptor(to, idr, namer));\r\n\t    \t    \t}\r\n        \t\t} else if(typeCell.equals(\"obstacle\")){\r\n\t\t\t\t\t//System.out.println(\"Add ObstacleCell\");\r\n        \t\t\tgrid.add(new ObstacleDescriptor(to));\r\n        \t\t} else {\r\n        \t\t\t//System.out.println(\"Add EmptyCell \" + xo + \", \" + yo);\r\n        \t\t\tgrid.add(new EmptyCell(xo,yo));\r\n    \t\t\t}\r\n    \t\t}\r\n      \t\tif(debug == 1) {\r\n\t\t   \t\tSystem.out.println(\"---- \" + name + \" ----\");\r\n        \t\tfor(Situated s:grid){\r\n        \t\t\ts.display();\r\n        \t\t}\r\n        \t}\r\n        }\r\n\t}\r\n\r\n\tpublic void setLocation(int x, int y) {\r\n\t\tint xo = this.x;\r\n\t\tint yo = this.y;\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\t\t\r\n\t}\r\n\r\n\tpublic List<Situated> getGrid() {\r\n\t\treturn grid;\r\n\t}\r\n\r\n\tpublic void setGrid(List<Situated> grid) {\r\n\t\tthis.grid = grid;\r\n\t}\r\n\r\n\tpublic void randomOrientation() {\r\n\t\tdouble d = Math.random();\r\n\t\tif(d < 0.25) {\r\n\t\t\tif(orientation != Orientation.up) \r\n\t\t\t\torientation = Orientation.up;\r\n\t\t\telse \r\n\t\t\t\torientation = Orientation.down;\r\n\t\t}\r\n\t\telse if(d < 0.5) {\r\n\t\t\tif(orientation != Orientation.down) \r\n\t\t\t\torientation = Orientation.down;\r\n\t\t\telse \r\n\t\t\t\torientation = Orientation.up;\r\n\t\t}\r\n\t\telse if(d < 0.75) {\r\n\t\t\tif(orientation != Orientation.left) \r\n\t\t\t\torientation = Orientation.left;\r\n\t\t\telse \r\n\t\t\t\torientation = Orientation.right;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(orientation != Orientation.right) \r\n\t\t\t\torientation = Orientation.right;\r\n\t\t\telse \r\n\t\t\t\torientation = Orientation.left;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void move(int step) {\t\r\n\t\tString actionr = \"move_forward\";\r\n\t\tString result = x + \",\" + y + \",\" + orientation + \",\";\r\n\t\tfor(int i = 0; i < step; i++) {\r\n\t\t\tEmptyCell[] ec = new EmptyCell[4];\r\n\t\t\tec[0] = null;\r\n        \tec[1] = null;\r\n        \tec[2] = null;\r\n        \tec[3] = null;\r\n\t\t\t//System.out.println(\"myRobot (\" + columns + \",\" + rows + \"): \" + getX() + \" \" + getY());\r\n\t\t\tString st = \"[\";\r\n\t\t\tfor(Situated s:grid){\r\n\t\t\t\t//System.out.println(\"neighbour (\" + s.getComponentType() + \"): \" + s.getX() + \" \" + s.getY());\r\n\t\t\t\tif(getX() > 0 && s.getX() == getX()-1 && s.getY()==getY()) {\r\n\t\t\t\t\tif(s.getComponentType() == ComponentType.empty) {\r\n\t\t\t\t\t\tec[2] = (EmptyCell)s;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tec[2] = null;\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(getX() < columns-1 && s.getX() == getX()+1 && s.getY()==getY()) {\r\n\t\t\t\t\tif(s.getComponentType() == ComponentType.empty) {\r\n\t\t\t\t\t\tec[3] = (EmptyCell)s;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tec[3] = null;\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(getY() < rows-1 && s.getY() == getY()+1 && s.getX()==getX()) {\r\n\t\t\t\t\tif(s.getComponentType() == ComponentType.empty) {\r\n\t\t\t\t\t\tec[1] = (EmptyCell)s;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tec[1] = null;\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(getY() > 0 && s.getY() == getY()-1 && s.getX()==getX()) {\r\n\t\t\t\t\tif(s.getComponentType() == ComponentType.empty) {\r\n\t\t\t\t\t\tec[0] = (EmptyCell)s;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tec[0] = null;\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tst+= s.getX() + \",\" + s.getY() + \": \" + s.display() + \"; \";\r\n\t\t\t}\r\n\t\t\tst = st.substring(0, st.length() - 2);        \r\n\t\t\tresult += st + \",\";\r\n\t\t\tif(orientation == Orientation.up) {\r\n\t\t\t\tif(ec[3] != null) \r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\telse {\r\n\t\t\t\t\t//randomOrientation();\r\n\t\t\t\t\tdouble d = Math.random();\r\n\t\t\t\t\tif(d < 0.5) {\r\n\t\t\t\t\t\tmoveLeft(1);\r\n\t\t\t\t\t\tactionr = \"turn_left\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveRight(1);\r\n\t\t\t\t\t\tactionr = \"turn_right\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.down) {\r\n\t\t\t\tif(ec[2] != null) \r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\telse {\r\n\t\t\t\t\t//randomOrientation();\r\n\t\t\t\t\tdouble d = Math.random();\r\n\t\t\t\t\tif(d < 0.5) {\r\n\t\t\t\t\t\tmoveLeft(1);\r\n\t\t\t\t\t\tactionr = \"turn_left\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveRight(1);\r\n\t\t\t\t\t\tactionr = \"turn_right\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.right) {\r\n\t\t\t\tif(ec[1] != null) \r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\telse {\r\n\t\t\t\t\t//randomOrientation();\r\n\t\t\t\t\tdouble d = Math.random();\r\n\t\t\t\t\tif(d < 0.5) {\r\n\t\t\t\t\t\tmoveLeft(1);\r\n\t\t\t\t\t\tactionr = \"turn_left\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveRight(1);\r\n\t\t\t\t\t\tactionr = \"turn_right\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(orientation == Orientation.left) {\r\n\t\t\t\tif(ec[0] != null) \r\n\t\t\t\t\tmoveForward();\r\n\t\t\t\telse {\r\n\t\t\t\t\t//randomOrientation();\r\n\t\t\t\t\tdouble d = Math.random();\r\n\t\t\t\t\tif(d < 0.5) {\r\n\t\t\t\t\t\tmoveLeft(1);\r\n\t\t\t\t\t\tactionr = \"turn_left\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveRight(1);\r\n\t\t\t\t\t\tactionr = \"turn_right\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(debug==2){\r\n\t\t\ttry{\r\n\t\t\t\twriter.write(result + actionr); \r\n\t\t\t\twriter.newLine();\r\n\t\t\t\twriter.flush();\r\n\t\t\t} catch(IOException ioe){\r\n\t\t\t\tSystem.out.println(ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void moveLeft(int step) {\r\n\t\tOrientation oldo = orientation;\r\n\t\tfor(int i = 0; i < step; i++){\r\n\t\t\tif(orientation == Orientation.up) {\r\n\t\t\t\torientation = Orientation.left;\r\n\t\t\t}\r\n\t\t\tif(orientation == Orientation.left) {\r\n\t\t\t\torientation = Orientation.down;\r\n\t\t\t}\r\n\t\t\tif(orientation == Orientation.right) {\r\n\t\t\t\torientation = Orientation.up;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\torientation = Orientation.right;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void moveRight(int step) {\r\n\t\tOrientation oldo = orientation;\r\n\t\tfor(int i = 0; i < step; i++){\r\n\t\t\tif(orientation == Orientation.up) {\r\n\t\t\t\torientation = Orientation.right;\r\n\t\t\t}\r\n\t\t\tif(orientation == Orientation.left) {\r\n\t\t\t\torientation = Orientation.up;\r\n\t\t\t}\r\n\t\t\tif(orientation == Orientation.right) {\r\n\t\t\t\torientation = Orientation.down;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\torientation = Orientation.left;\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\tpublic void moveForward() {\r\n\t\tint xo = x;\r\n\t\tint yo = y;\r\n\t\tif(orientation == Orientation.up) {\r\n\t\t\tx += 1;\r\n\t\t\tx = Math.min(x,columns-1);\r\n\t\t}\r\n\t\telse if(orientation == Orientation.left) {\r\n\t\t\ty -= 1;\r\n\t\t\ty = Math.max(y,0);\r\n\t\t}\r\n\t\telse if(orientation == Orientation.right) {\r\n\t\t\ty += 1;\r\n\t\t\ty = Math.min(y,rows-1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tx -= 1;\r\n\t\t\tx = Math.max(x,0);\r\n\t\t}\t\r\n\t\tJSONObject robotj = new JSONObject();\r\n\t\trobotj.put(\"name\", name);\r\n\t\trobotj.put(\"id\", \"\"+id);\r\n\t\trobotj.put(\"x\", \"\"+x);\r\n\t\trobotj.put(\"y\", \"\"+y);\r\n\t\trobotj.put(\"xo\", \"\"+xo);\r\n\t\trobotj.put(\"yo\", \"\"+yo);\r\n\t\t//System.out.println(\"MOVE MOVE \" + xo + \" \" + yo + \" --> \" + x + \" \" + y);\r\n\t\tclientMqtt.publish(\"robot/nextPosition\", robotj.toJSONString());\r\n\t}\r\n\r\n\tpublic void moveBackward() {\r\n\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/burger/RandomTurtlebot.java b/src/burger/RandomTurtlebot.java
--- a/src/burger/RandomTurtlebot.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/burger/RandomTurtlebot.java	(date 1652279798563)
@@ -23,8 +23,8 @@
 	protected int rows;
 	protected int columns;
 
-	public RandomTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug) {
-		super(id, name, seed, field, clientMqtt, debug);
+	public RandomTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug, ComponentType team) {
+		super(id, name, seed, field, clientMqtt, debug, team);
 		rnd = new Random(seed);
 		grid = new ArrayList<Situated>();	
 	}
Index: src/burger/HunterTurtlebot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/burger/HunterTurtlebot.java b/src/burger/HunterTurtlebot.java
new file mode 100644
--- /dev/null	(date 1652445130514)
+++ b/src/burger/HunterTurtlebot.java	(date 1652445130514)
@@ -0,0 +1,418 @@
+package burger;
+
+import model.ComponentType;
+import model.Situated;
+import components.Turtlebot;
+import model.EmptyCell;
+import model.UnknownCell;
+import model.Grid;
+import mqtt.Message;
+import java.util.Random;
+import model.ObstacleDescriptor;
+import model.RobotDescriptor;
+import org.json.simple.JSONArray;
+import org.json.simple.JSONObject;
+import java.util.List;
+import java.io.BufferedWriter;
+import java.io.FileWriter;
+import java.io.IOException;
+//TODO cas ou getclosest renvoit rien
+public class HunterTurtlebot extends Turtlebot{
+    protected Random rnd;
+    protected Grid grid;
+    protected ComponentType proie;
+    protected ComponentType team;
+
+    public HunterTurtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug,ComponentType team) {
+        super(id, name, seed, field, clientMqtt, debug,team);
+        rnd = new Random(seed);
+
+        if (team==ComponentType.vipere)proie=ComponentType.renard;
+        else if (team==ComponentType.renard)proie=ComponentType.poule;
+        else if (team==ComponentType.poule)proie=ComponentType.vipere;
+
+
+    }
+
+
+
+    protected void init() {
+        clientMqtt.subscribe("inform/grid/init");
+        clientMqtt.subscribe(name + "/position/init");
+        clientMqtt.subscribe(name + "/grid/init");
+        clientMqtt.subscribe(name + "/grid/update");
+        clientMqtt.subscribe(name + "/action");
+    }
+
+    public void handleMessage(String topic, JSONObject content){
+        if (topic.contains(name+"/grid/update")) {
+            JSONArray ja = (JSONArray)content.get("cells");
+            List<Situated> ls = grid.get(ComponentType.robot);
+            for(int i=0; i < ja.size(); i++) {
+                JSONObject jo = (JSONObject)ja.get(i);
+                String typeCell = (String)jo.get("type");
+                int xo = Integer.parseInt((String)jo.get("x"));
+                int yo = Integer.parseInt((String)jo.get("y"));
+                int[] to = new int[]{xo,yo};
+                if(typeCell.equals("robot")) {
+                    int idr = Integer.parseInt((String)jo.get("id"));
+                    boolean findr = false;
+                    for(Situated sss:ls) {
+                        if(sss != this){
+                            RobotDescriptor rd = (RobotDescriptor)sss;
+                            if(rd.getId() == idr) {
+                                grid.moveSituatedComponent(rd.getX(), rd.getY(), xo, yo);
+                                findr = true;
+                                break;
+                            }
+                        }
+                    }
+                    if(!findr) {
+                        String namer = (String)jo.get("name");
+                        grid.forceSituatedComponent(new RobotDescriptor(to, idr, namer));
+                    }
+                } else {
+                    Situated sg = grid.getCell(yo,xo);
+                    Situated s;
+                    if(sg.getComponentType() == ComponentType.unknown) {
+                        if(typeCell.equals("obstacle")){
+                            //System.out.println("Add ObstacleCell");
+                            s = new ObstacleDescriptor(to);
+                        } else {
+                            //System.out.println("Add EmptyCell " + xo + ", " + yo);
+                            s = new EmptyCell(xo,yo);
+                        }
+                        grid.forceSituatedComponent(s);
+                    }
+                }
+            }
+            if(debug == 1) {
+                System.out.println("---- " + name + " ----");
+                grid.display();
+            }
+        } else if (topic.contains(name+"/action")) {
+            int stepr = Integer.parseInt((String)content.get("step"));
+            move(stepr);
+        } else if (topic.contains("inform/grid/init")) {
+            int rows = Integer.parseInt((String)content.get("rows"));
+            int columns = Integer.parseInt((String)content.get("columns"));
+            grid = new Grid(rows, columns, seed);
+            grid.initUnknown();
+            grid.forceSituatedComponent(this);
+        }
+        else if (topic.contains(name+"/position/init")) {
+            x = Integer.parseInt((String)content.get("x"));
+            y = Integer.parseInt((String)content.get("y"));
+        }
+        else if (topic.contains(name+"/grid/init")) {
+            JSONArray ja = (JSONArray)content.get("cells");
+            for(int i=0; i < ja.size(); i++) {
+                JSONObject jo = (JSONObject)ja.get(i);
+                String typeCell = (String)jo.get("type");
+                int xo = Integer.parseInt((String)jo.get("x"));
+                int yo = Integer.parseInt((String)jo.get("y"));
+                int[] to = new int[]{xo,yo};
+                Situated s;
+                if(typeCell.equals("obstacle")){
+                    //System.out.println("Add ObstacleCell");
+                    s = new ObstacleDescriptor(to);
+                }
+                else if(typeCell.equals("robot")){
+                    //System.out.println("Add RobotCell");
+                    int idr = Integer.parseInt((String)jo.get("id"));
+                    String namer = (String)jo.get("name");
+                    s = new RobotDescriptor(to, idr, namer);
+                }
+                else {
+                    //System.out.println("Add EmptyCell " + xo + ", " + yo);
+                    s = new EmptyCell(xo,yo);
+                }
+                grid.forceSituatedComponent(s);
+            }
+        }
+    }
+
+    public void setLocation(int x, int y) {
+        int xo = this.x;
+        int yo = this.y;
+        this.x = x;
+        this.y = y;
+        grid.moveSituatedComponent(xo, yo, x, y);
+    }
+
+    public Grid getGrid() {
+        return grid;
+    }
+
+    public void setGrid(Grid grid) {
+        this.grid = grid;
+    }
+
+    public void randomOrientation() {
+        double d = Math.random();
+        Orientation oldo = orientation;
+        if(d < 0.25) {
+            if(orientation != Orientation.up)
+                orientation = Orientation.up;
+            else
+                orientation = Orientation.down;
+        }
+        else if(d < 0.5) {
+            if(orientation != Orientation.down)
+                orientation = Orientation.down;
+            else
+                orientation = Orientation.up;
+        }
+        else if(d < 0.75) {
+            if(orientation != Orientation.left)
+                orientation = Orientation.left;
+            else
+                orientation = Orientation.right;
+        }
+        else {
+            if(orientation != Orientation.right)
+                orientation = Orientation.right;
+            else
+                orientation = Orientation.left;
+        }
+    }
+
+    public void move(int step) {
+        //fonctions de Jules qui renvoit un objet Situated
+
+        String actionr = "move_forward";
+        String result = x + "," + y + "," + orientation + "," + grid.getCellsToString(y,x) + ",";
+        Situated cible =getClosest();
+
+        for(int i = 0; i < step; i++) {
+            //onrécupère la liste des cellules adjacentes
+            //On définit l'orientation "cible" en fonction des coordonnées cibles
+            //Disjonction des cas selon l'orientation précédente et le caractère vide de la cellule
+            EmptyCell[] ec = grid.getAdjacentEmptyCell(x,y);
+            System.out.println ("Empty cells : "+ec);
+            if (cible==null){
+                moveForward();
+            }
+            else {
+                System.out.println(("cible : " + cible));
+                Orientation targetOrientation = setNewOrientation(cible);
+
+                if (orientation == Orientation.up) {
+                    if (targetOrientation == Orientation.up) {
+                        if (ec[3] != null) {
+                            moveForward();
+                        }
+                    }
+                    if (targetOrientation == Orientation.down) {
+                        moveLeft(1);
+                    }
+                    if (targetOrientation == Orientation.left) {
+                        moveLeft(1);
+                    }
+                    if (targetOrientation == Orientation.right) {
+                        moveRight(1);
+                    }
+                } else if (orientation == Orientation.down) {
+                    if (targetOrientation == Orientation.up) {
+                        moveLeft(1);
+                    }
+                    if (targetOrientation == Orientation.down) {
+                        if (ec[2] != null) {
+                            moveForward();
+                        }
+                    }
+                    if (targetOrientation == Orientation.left) {
+                        moveRight(1);
+                    }
+                    if (targetOrientation == Orientation.right) {
+                        moveLeft(1);
+                    }
+                } else if (orientation == Orientation.right) {
+                    if (targetOrientation == Orientation.up) {
+                        moveLeft(1);
+                    }
+                    if (targetOrientation == Orientation.down) {
+                        moveRight(1);
+                    }
+                    if (targetOrientation == Orientation.left) {
+                        moveLeft(1);
+                    }
+                    if (targetOrientation == Orientation.right) {
+                        if (ec[1] != null) {
+                            moveForward();
+                        }
+                    }
+                } else if (orientation == Orientation.left) {
+                    if (targetOrientation == Orientation.up) {
+                        moveRight(1);
+                    }
+                    if (targetOrientation == Orientation.down) {
+                        moveLeft(1);
+                    }
+                    if (targetOrientation == Orientation.left) {
+                        if (ec[0] != null) {
+                            moveForward();
+                        }
+                    }
+                    if (targetOrientation == Orientation.right) {
+                        moveLeft(1);
+                    }
+                }
+            }
+        }
+        if(debug==2){
+            try{
+                writer.write(result + actionr);
+                writer.newLine();
+                writer.flush();
+            } catch(IOException ioe){
+                System.out.println(ioe);
+            }
+        }
+    }
+
+    public double getDistance( int xo, int yo) {
+        return Math.sqrt(Math.pow((xo-getX()),2) + Math.pow((yo-getY()),2));
+    }
+
+    public Situated getClosest() {
+        double distance = 10^35;
+        Situated official = null;
+        System.out.println("Grille champ de vision " + this.proie + this.id + " : " + getGrid().getAdjacentEmptyCell(this.x,this.y));
+        for (Situated[] l:grid.getGrid()) {
+            for (Situated s:l) {
+                if(s.getComponentType() == proie) {
+                    //RobotDescriptor ss = (RobotDescriptor) s;
+                    double distanceUpdate = getDistance( s.getX(), s.getY());
+                    if (distanceUpdate < distance) {
+                        distance = distanceUpdate;
+                        official = s;
+                    }
+                }
+            }
+        }
+       if (official!=null) System.out.println("Closest found : "+official.display());
+        return official;
+
+    }
+
+    public Orientation setNewOrientation(Situated s) {
+        Orientation orientationN = Orientation.up;
+        double pente = Math.abs((s.getY()-getY())/(s.getX()-getX()));
+
+        // quart supérieur gauche
+        if (s.getX() < getX() && s.getY() > getY()) {
+            if (pente <= 1) {
+                orientationN = Orientation.down;
+            } else {
+                orientationN = Orientation.left;
+            }
+        }
+        // quart supérieur droit
+        if (s.getX() > getX() && s.getY() > getY()) {
+            if (pente > 1) {
+                orientationN = Orientation.left;
+            } else {
+                orientationN = Orientation.up;
+            }
+        }
+        // quart inférieur droit
+        if (s.getX() > getX() && s.getY() < getY()) {
+            if (pente > 1) {
+                orientationN = Orientation.right;
+            } else {
+                orientationN = Orientation.up;
+            }
+        }
+        // quart inférieur gauche
+        if (s.getX() < getX() && s.getY() < getY()) {
+            if (pente > 1) {
+                orientationN = Orientation.right;
+            } else {
+                orientationN = Orientation.down;
+            }
+        }
+
+        if (s.getX() == getX() && s.getY() > getY()) {
+            orientationN = Orientation.left;
+        } else if (s.getX() == getX() && s.getY() > getY()) {
+            orientationN = Orientation.right;
+        } else if (s.getX() > getX() && s.getY() == getY()) {
+            orientationN = Orientation.up;
+        } else if (s.getX() < getX() && s.getY() == getY()) {
+            orientationN = Orientation.down;
+        }
+
+        return orientationN;
+    }
+    public void moveLeft(int step) {
+        Orientation oldo = orientation;
+        for(int i = 0; i < step; i++){
+            if(orientation == Orientation.up) {
+                orientation = Orientation.left;
+            }
+            else if(orientation == Orientation.left) {
+                orientation = Orientation.down;
+            }
+            else if(orientation == Orientation.right) {
+                orientation = Orientation.up;
+            }
+            else {
+                orientation = Orientation.right;
+            }
+        }
+    }
+
+    public void moveRight(int step) {
+        Orientation oldo = orientation;
+        for(int i = 0; i < step; i++){
+            if(orientation == Orientation.up) {
+                orientation = Orientation.right;
+            }
+            else if(orientation == Orientation.left) {
+                orientation = Orientation.up;
+            }
+            else if(orientation == Orientation.right) {
+                orientation = Orientation.down;
+            }
+            else {
+                orientation = Orientation.left;
+            }
+        }
+    }
+
+    public void moveForward() {
+        int xo = x;
+        int yo = y;
+        if(orientation == Orientation.up) {
+            x += 1;
+            x = Math.min(x,grid.getColumns()-1);
+        }
+        else if(orientation == Orientation.left) {
+            y -= 1;
+            y = Math.max(y,0);
+        }
+        else if(orientation == Orientation.right) {
+            y += 1;
+            y = Math.min(y,grid.getRows()-1);
+        }
+        else {
+            x -= 1;
+            x = Math.max(x,0);
+        }
+        grid.moveSituatedComponent(xo,yo,x,y);
+        JSONObject robotj = new JSONObject();
+        robotj.put("name", name);
+        robotj.put("id", ""+id);
+        robotj.put("x", ""+x);
+        robotj.put("y", ""+y);
+        robotj.put("xo", ""+xo);
+        robotj.put("yo", ""+yo);
+        //System.out.println("MOVE MOVE " + xo + " " + yo + " --> " + x + " " + y);
+        clientMqtt.publish("robot/nextPosition", robotj.toJSONString());
+    }
+
+    public void moveBackward() {
+
+    }
+}
\ No newline at end of file
Index: src/components/Turtlebot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components;\r\n\r\nimport model.ComponentType;\r\nimport model.Situated;\r\nimport burger.Orientation;\r\nimport mqtt.Message;\r\nimport model.ObstacleDescriptor;\r\nimport model.RobotDescriptor;\r\n\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\n/* This class defines the different operations that the robot can do on the grid */\r\n\r\npublic abstract class Turtlebot implements Situated, SimulationComponent {\t\r\n\tprotected Message clientMqtt;\r\n\tprotected String name;\r\n\tprotected int id;\r\n\tprotected int debug;\r\n\tprotected int x, y;\r\n\tprotected Orientation orientation;\r\n\t//protected boolean waitAnswer = false;\r\n\tprotected boolean goalReached;\t\r\n\tprotected int seed;\r\n\tprotected BufferedWriter writer;\r\n\tprotected int field;\r\n\tprotected String sttime;\r\n\t\r\n\tprotected Turtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug) {\r\n\t\tthis.name = name;\r\n\t\tthis.debug = debug;\r\n\t\tthis.id = id;\t\t\r\n\t\tthis.clientMqtt = clientMqtt;\r\n\t\torientation = Orientation.right;\r\n\t\tgoalReached = false;\r\n\t\tthis.seed = seed;\r\n\t\tthis.field = field;\r\n\t}\r\n\r\n\tpublic void setLog(String st) {\r\n\t\tsttime = st;\r\n\t\tif(debug==2){\r\n\t\t\ttry{\r\n\t\t\t\twriter = new BufferedWriter(new FileWriter(sttime+\"/\"+name+\".log\")); \r\n\t\t\t} catch(IOException ioe){\r\n\t\t\t\tSystem.out.println(ioe);\r\n\t\t\t\tSystem.exit(1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic int getId() {\r\n\t\treturn id;\r\n\t}\r\n\r\n\tpublic boolean isGoalReached(){\t\t\r\n\t\treturn goalReached;\r\n\t}\r\n\r\n\tpublic void setGoalReached(boolean gr){\r\n\t\tgoalReached = gr;\r\n\t\tif(debug==2){\r\n\t\t\ttry{\r\n\t\t\t\twriter.write(\"goal reached\"); \r\n\t\t\t\twriter.close();\r\n\t\t\t} catch(IOException ioe){\r\n\t\t\t\tSystem.out.println(ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\r\n\tprotected abstract void init() ;\r\n\r\n\tpublic ComponentType getComponentType() {\r\n\t\treturn ComponentType.robot;\r\n\t}\r\n\r\n\tpublic abstract void setLocation(int x, int y) ; \r\n\r\n\tpublic int getX() {\r\n\t\treturn x;\r\n\t}\r\n\r\n\tpublic int getY(){\r\n\t\treturn y;\r\n\t}\r\n\r\n\tpublic void setX(int x) {\r\n\t\tthis.x =x;\r\n\t}\r\n\r\n\tpublic void setY(int y) {\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\tpublic int getField(){\r\n\t\treturn field;\r\n\t}\r\n\r\n\tpublic Orientation getCurrentOrientation() {\r\n\t\treturn orientation;\r\n\t}\r\n\r\n\tpublic void setCurrentOrientation(Orientation or) {\r\n\t\torientation = or;\r\n\t}\r\n\r\n/*\tpublic boolean isWaitAnswer() {\r\n\t\treturn waitAnswer;\r\n\t}\r\n\r\n\tpublic void setWaitAnswer(boolean wa) {\r\n\t\twaitAnswer = wa;\r\n\t}\r\n*/\r\n\tpublic String display(){\r\n\t\treturn id+\"\";\r\n\t}\r\n\r\n\tpublic abstract void handleMessage(String topic, JSONObject content) ;\r\n\r\n\tpublic abstract void moveRight(int step);\r\n\tpublic abstract void moveLeft(int step);\r\n\tpublic abstract void moveForward();\r\n\tpublic abstract void move(int step);\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic boolean equals(Object o) {\r\n\t\tif(o instanceof Turtlebot) {\r\n\t\t\treturn id == ((Turtlebot)o).getId();\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic String toString() {\r\n\t\treturn \"{\" + name + \"; \" + id + \"; \" + x + \"; \" + y + \"; \" + orientation + \"}\";\r\n\t}\r\n\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tpublic JSONObject toJSON() {\r\n\t\tJSONObject jo = new JSONObject();\r\n\t\tjo.put(\"type\",\"turtlebot\");\r\n\t\tjo.put(\"name\",name);\r\n\t\tjo.put(\"id\",\"\"+id);\r\n\t\tjo.put(\"x\",\"\"+x);\r\n\t\tjo.put(\"y\",\"\"+y);\r\n\t\treturn jo;\r\n\t}\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Turtlebot.java b/src/components/Turtlebot.java
--- a/src/components/Turtlebot.java	(revision 59caa0c0e7ca07de8a40ba6e13ccf8a455afd35c)
+++ b/src/components/Turtlebot.java	(date 1652442824339)
@@ -1,5 +1,6 @@
 package components;
 
+import burger.Team;
 import model.ComponentType;
 import model.Situated;
 import burger.Orientation;
@@ -32,8 +33,9 @@
 	protected BufferedWriter writer;
 	protected int field;
 	protected String sttime;
-	
-	protected Turtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug) {
+	ComponentType  team;
+
+	protected Turtlebot(int id, String name, int seed, int field, Message clientMqtt, int debug, ComponentType team) {
 		this.name = name;
 		this.debug = debug;
 		this.id = id;		
@@ -42,6 +44,7 @@
 		goalReached = false;
 		this.seed = seed;
 		this.field = field;
+		this.team=team;
 	}
 
 	public void setLog(String st) {
@@ -79,7 +82,7 @@
 	protected abstract void init() ;
 
 	public ComponentType getComponentType() {
-		return ComponentType.robot;
+		return this.team;
 	}
 
 	public abstract void setLocation(int x, int y) ; 
Index: src/burger/Team.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/burger/Team.java b/src/burger/Team.java
new file mode 100644
--- /dev/null	(date 1652272706113)
+++ b/src/burger/Team.java	(date 1652272706113)
@@ -0,0 +1,5 @@
+package burger;
+
+public enum Team {
+    viperes,renards,poules;
+}
